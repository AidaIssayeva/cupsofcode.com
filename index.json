[{"categories":["Personal"],"content":"Annual retrospectives are a great way to look back and analyze all the milestones you‚Äôve overcome, what went wrong, and what areas could use some improvement. For as long as I can remember, I‚Äôve been doing end-of-year recaps where I‚Äôd sit down and track the previous 12 month-long journeys on paper for my own eyes only. However that all changed for the first time in 2019 when I shared my 2019 recap article. Then when the tail end of 2020 rolled around, my plans to layout another EOY recap were unfortunately pushed aside due to an overloaded amount of work. However this year, I‚Äôm definitely not skipping out on reviewing my 2021 end-of-year expedition.\nIf I were to describe 2021 with one word, it would be ‚Äúmaturity‚Äù. I have very mixed feelings about 2021: When my professional life was on fire, my personal life was perfect. And just like a seesaw, when my personal life was on fire, my professional life was quiet and enjoyable. But one thing is for sure: never-ending stress throughout 2021 caused me to mature way too fast.\nSo, what are some professional highlights of 2021?\n I revamped my personal blog website and used a new Hugo theme [you‚Äôre reading this article on a newly redesigned website üòâ, it took me only 3 months üòÜ¬†with still a lot to do] At the beginning of the year, I quit my job with no prospective offer on the horizon. Graduated from Women Developer Academy üéâ! I had an amazing experience and improved(or so I like to think üôÇ) my public speaking skills.  2021 Professional Timeline:  Quitting job ‚Üí burnout with low salary hike. For the first time in 10 years, I took 3 months off with no direction. Interview process: things got easier than they were 4 years ago. Not sure if it‚Äôs because I‚Äôve gotten more experienced, demand in my industry is high, or maybe a mixture of both\u0026hellip; But regardless, I‚Äôm glad at least something was in my favor this year üòÖ. New Job is 100% salary increase.  2021 Everything Else: a) Being a landlord is a full-time job. It exhausted me a lot.\nb) Well, it‚Äôs official, my health took a big hit this year. From severe eczema(thanks to burnout \u0026amp; stress) to 2 month-long dental pain caused by a bad visit to a new dentist, to getting COVID right on Christmas break. I‚Äôve also noticed the change in how the body handles stress and the increasing toll it takes on our physical health as we age; which becomes especially true for anyone over 30 (no duh surprise!)\n2021 Goals Review and Completion Rate:    Name Start End Goal Completion Rate     Increase tiktok to 100 followers 12 362 100 362%   Increase instagram to 500 followers 337 283 500 -54   Increase twitter to 500 followers 277 425 500 85%   Write 10 blog posts 0 6 10 60%    Thank you, 2021 üôè! You‚Äôve been plentiful! Looking forward to 2022! Hope the upcoming year will bring us joy, health, and happiness!\n","date":"Dec 31, 2021","permalink":"https://cupsofcode.com/post/2021_review/","series":null,"tags":null,"title":"2021 Year in Review"},{"categories":["Android Development"],"content":" Table Of Contents:   Implementation Testing  Manual Testing Unit Testing      Last year, Android introduced a new in-app review API that would allow users to review and rate an app within the app itself. Meaning, developers no longer have to worry about keeping track of how many times the ‚ÄúRate Us‚Äù dialog has been displayed to users and whether the users clicked to go Play Store App.\nThe intention of this API is to remove overhead on developers and keep users in the app with respect to their privacy. However, from a developer standpoint, there are a couple of prerequisites to keep in mind while integrating the in-app review API.\n  Your app‚Äôs applicationId must at least be available in the internal track on Google Play, otherwise the in-app review will never appear.\n  Displaying a review bottomsheet is not guaranteed. Play Core handles the logic of how many times the bottomsheet will be displayed to a user, whether the user has interacted with the bottomsheet, and whether the user has already submitted a review. The API only exposes one listener to notify whether we should proceed with the regular flow in the app. Thus, all this handling done by the API causes end-to-end testing to become difficult.\n  In this tutorial, I‚Äôll walk you through the integration of the in-app review API in MVI fashion.\nImplementation Prerequisites of this tutorial:\n RxJava Dagger MVI (model-view-intent)  Let‚Äôs dive into details:\nStep 1:\nAdd the following dependencies into the build.gradle file of your desired feature:\n1// This dependency is downloaded from Google‚Äôs Maven repository. 2// So, make sure you also include that repository in your project\u0026#39;s build.gradle file. 3implementation \u0026#39;com.google.android.play:core:1.10.2\u0026#39; 4 5// For Kotlin users also import the Kotlin extensions library for Play Core: 6implementation \u0026#39;com.google.android.play:core-ktx:1.8.1\u0026#39; Step 2:\nCreate an instance of ReviewManager inside the desired feature‚Äôs dagger module:\n1@Provides 2@Singleton 3fun providesReviewManager(): ReviewManager { 4 return ReviewManagerFactory.create(context) 5} Step 3:\nInject the instance into the feature‚Äôs viewmodel: 1class ActivityViewModel @Inject constructor( 2 private val navigator: Navigator, 3 private val reviewManager: ReviewManager 4) : ViewModel() {\nStep 4:\nIn this step we introduce the logic of triggering the in-app review. Due to the quota limitations, Play Console advises not to have any call-to-action option that triggers the API. So the best way to trigger it will be after completing a couple of levels in a game, and/or after the user becomes familiar with the app and has used it for quite a while.\nIn my example, I don‚Äôt have too much complicated logic implemented. Rather, I\u0026rsquo;m just triggering the API after the 5th,10th, and 20th session. Session numbers are saved in shared preferences.\n1Single.create\u0026lt;ReviewInfo\u0026gt; { emitter -\u0026gt; 2 val session = sharedPreferences.getInt(SESSION, 1) 3 if (session == 5 || session == 10 || session == 20) { 4 val reviewInfo = reviewManager.requestReviewFlow() 5 reviewInfo.addOnCompleteListener { task -\u0026gt; 6 if (task.isSuccessful) { 7 emitter.onSuccess(task.result) 8 } else { 9 emitter.onError(Throwable(task.exception)) 10 } 11 12 } 13 } else { 14 emitter.onError(Throwable(\u0026#34;no time to request in-app review\u0026#34;)) 15 } 16}.map\u0026lt;ActivityIntent\u0026gt; { 17 ActivityIntent.InAppReviewRequested(it) 18}.onErrorReturn { error -\u0026gt; 19 //If this throws an error, do you need to display it to a user? Not really. 20 // We can just log an error. 21 ActivityIntent.NoOp 22}.toObservable() If the session is 5th, 10th or 20th, request a review flow from ReviewManager (line 4). Add a complete listener to the request. If the request is successful, we can go ahead and launch the review flow on UI. If not, we emit the error, but do nothing with it (when mapping, the error is converted into NoOp intent that doesn‚Äôt change or update the viewstate).\nStep 5:\nIn the reducer, pass the reviewInfo object which is used to launch the flow, to the state:\n1is ActivityIntent.InAppReviewRequested -\u0026gt; { 2 previous.copy(reviewInfo = intent.reviewInfo) 3} Step 6: In the subscriber, listen to the changes and if reviewInfo object exists inside the viewstate, launch the flow:\n1viewState.reviewInfo?.run { 2 val review = reviewManager.launchReviewFlow(this@MainActivity, this) 3 review.addOnCompleteListener { 4 intentsSubject.onNext(ActivityIntent.InAppReviewCompleted) 5 } 6} After the review flow is completed(note: even at this point, it is not guaranteed whether the bottomsheet will appear or not), trigger the InAppReviewCompleted intent to continue on with the regular flow. In our viewmodel, where intents are bounded, handle the InAppReviewCompleted :\n1it.ofType(ActivityIntent.InAppReviewCompleted::class.java) 2 .flatMapCompletable { 3 //after receiving a signal that review flow ended, we proceed with regular flow 4 navigator.navigateTo(NavigatorPath.Feed) 5 }.toObservable\u0026lt;ActivityIntent\u0026gt;() Testing Manual Testing For manual testing, make sure an account has not reviewed the app yet. If so - delete the review and add the account email into the internal test tracking group. Then, proceed to distribute the internal test build to your test group. There is a great walkthrough of in-app review manual testing by John Codeos.\nUnit Testing I‚Äôve noticed in many blog posts about in-app review API, the unit testing is not fully covered and only briefly mentioned. It will not be the case with this post üòâ.\nFor mocking in unit tests, I use Mockk library. 1implementation \u0026#39;io.mockk:mockk:1.10.2\u0026#39;\nInside the ViewModelTest, create a mock instance of FakeReviewManager:\n1private val reviewManager: FakeReviewManager = mockk(relaxed = true) Then mock the instance of the task and reviewInfo: 1val mockReviewInfo = mockk\u0026lt;ReviewInfo\u0026gt;(relaxed = true) 2val mockReviewInstance = mockk\u0026lt;Task\u0026lt;ReviewInfo\u0026gt;\u0026gt;(relaxed = true)\nThen mock the successful behavior of reviewInfo and task instances:\n1//given 2every { mockReviewInstance.isSuccessful } returns true 3every { mockReviewInstance.result } returns mockReviewInfo 4every { reviewManager.requestReviewFlow() } returns mockReviewInstance 5 6val slot = slot\u0026lt;OnCompleteListener\u0026lt;ReviewInfo\u0026gt;\u0026gt;() 7every { mockReviewInstance.addOnCompleteListener(capture(slot)) } answers { 8 slot.captured.onComplete(mockReviewInstance) 9 mockReviewInstance 10} Set up a list of expected viewstates: 1//given 2val expectedViewStates = arrayOf( 3 ViewState(), 4 ViewState().copy(reviewInfo = mockReviewInfo) 5)\nThen check values of actual and expected view states: 1//when 2val resultsObserver = activityViewModel.bind(intentSubject).test() 3 4//then 5resultsObserver.assertValues(*expectedViewStates)\nFor failed state, mock the failed behavior by tweaking the return:\n1//given 2every { mockReviewInstance.isSuccessful } returns false 3every { mockReviewInstance.result } returns mockReviewInfo 4every { mockReviewInstance.exception } returns Exception(Unsuccessful_Task) 5every { reviewManager.requestReviewFlow() } returns mockReviewInstance Protip: the same style of detailed mocking Task and Object can be applied with other Google products like Firebase, Play Core, etc.   The full integration PR can be found here with unit tests in place.\nI hope this post was helpful. If you have questions or something is unclear - please leave a comment!\n Huge thank you to Eugenio Lopez for reviewing and editing this blog post üôè.\n","date":"Oct 30, 2021","permalink":"https://cupsofcode.com/post/google_play_in-app_review_api_integration_mvi/","series":null,"tags":["android"],"title":"Integrating a Seamless In-App Review Rating Experience in MVI"},{"categories":["Career"],"content":"Featured in Android Weekly Issue #487.  Featured in Dev Weekly Issue #106.   So you want to become an Android Developer and don\u0026rsquo;t know where to start?\nHere is my 5-step guide to becoming an Android Developer, jam-packed with action items after each step.\n  Presentation  \n  Video:      Table Of Contents:   1. Learn a Programming Language 2. Learn Android Platform Fundamentals 3. Get to know the Tools 4. Contribute to Open Source 5. Share Your Learnings Conclusion    1. Learn a Programming Language Learning and knowing a programming language is essential in software engineering. There are two primary languages used in Android Development: Java and Kotlin. If you‚Äôre thinking about what to learn? Hint: it should be Kotlin   Kotlin is a first-class language for writing android apps. Why? It has an extensive list of features that help developers with day-to-day coding. It reduces the tedious boilerplate code developers have to write - meaning increased productivity. It helps to write safer code, which means fewer mistakes and crashes. And it is also Java language compatible - meaning developers can call java-based code from Kotlin or vice-versa.\nWhen learning Kotlin, there are 3 pillars you should focus on:\n Syntax and idioms OOP (Object-oriented programming) Data structures and algorithms  Todo action items are on slide 5 .\n2. Learn Android Platform Fundamentals Android development is impossible without knowing the fundamentals of its platform. The platform itself consists of multiple different components. But the essentials to start developing apps include:\n App Components, Views, and Intents Context Handling app configuration changes Unit testing Multithreading Security Navigation  Todo action items are on slide 7 .\nOnce you‚Äôve completed the essentials, the good to know topics are dependency injection and 3rd party libraries, and so on‚Ä¶\n3. Get to know the Tools Three most important tools every Android developer should know how to use: Android Studio as your go-to IDE, Git as your go-to version control system, and Gradle as your go-to build automation tool.\nAndroid Studio is the official IDE (Integrated Development Environment) for building android apps. It‚Äôs based on top of IntelliJ‚Äôs IDEA and has tons of developer tools and features that help you write android apps for mobile phones, TVs, watches, auto, etc.\nVersion Control Systems (VCS) are designed to track changes in the codebase, coordinate work among developers, and allow them to reference older versions later. There are multiple types of VCS that exist, but the most popular one is Git. The popular repository hosting service for git is Github .\nGradle is a build automation tool to build, compile and publish apps. It‚Äôs already built-in in Android Studio.\nTodo action items are on slide 9 .\n Would you prefer courses? Then checkout which course will suit you best here .\n 4. Contribute to Open Source Contributing to open-source projects might be a very time-consuming task, but it has some important outcomes that beginners can benefit from. It helps you learn more about projects, improves your coding skills, and helps the community and your peers get to know you. This recognition can bring a lot of opportunities in your career.\nYou don‚Äôt need to select a big, established open source project. It could be a small project that caught your eye on Github . In fact, most projects on Github are open to the public, therefore you can contribute to them.\nThere are many ways to contribute:\n Found a bug in a project? Open an issue! Found a typo in the documentation or there is an undocumented method? Open a pull request with the fix! A project has some open pull requests? Review them! Have a solution for one of the open issues? Open a pull request with the fix or new feature!  and so on\u0026hellip;\nTodo action items are on slide 11 .\n5. Share Your Learnings Did you build a Hello World app? - Share it! Share everything from your perspective on Android development, to where you seem to struggle most while learning to build apps.\n The biggest benefit of sharing at the beginning of your career is that it‚Äôll keep you accountable to code a little bit every day, thus learning something new every day.\n Most beginners drop out here because they feel alone in this journey. But the actual truth is if you struggle, then there are others struggling too. Talk with others about your learning journey.\nOne place to put yourself out there is Twitter. If you don‚Äôt feel comfortable or shy putting yourself out there, start with Reddit, GDG local groups, Meetup, and share your experience there. When you join communities, it‚Äôll help you to overcome the fear of asking for help. Thus, help you to grow as a developer.\nTodo action items are on slide 13 .\nConclusion The journey of becoming an Android Developer usually begins with learning a programming language. Kotlin is a recommended language for android app development.\nThen it goes to learning the android platform fundamentals, understanding how an app communicates with the system itself, how the navigation is enforced, etc.\nAfter learning the fundamentals, it‚Äôs time to start writing some code for an android project. And it‚Äôs impossible without knowing the tools that will help you write, publish and share the source code. The essentials are Android Studio, Git, and Gradle.\nThe last two steps are about accelerating and exposing you as a developer to the android community. Contributing to open-source projects help you to become familiarized with various codebases, write better code, and communicate with other contributors.\nLast, but not least is sharing. Share your journey, learnings, and frustrations, because when you share, you keep yourself accountable to code a bit every day. And most importantly, to learn something new!\nOk, that\u0026rsquo;s the wrap!\nNow go and start coding!\n","date":"Sep 29, 2021","permalink":"https://cupsofcode.com/post/the_five_step_guide_to_become_android_developer/","series":null,"tags":["early career"],"title":"The 5-Step Guide to Become an Android Developer"},{"categories":["Web Development"],"content":"After 2 years of using the NewsRoom theme on Hugo, I wanted to switch themes and use something new. With Bootstrap theme as my ideal choice, I decided to nosedive into migrating over until I was faced with my first blocker\u0026hellip; upgrading Hugo to its latest version.\nMy current Hugo version: 0.61.0\nThe new theme‚Äôs minimum required version: 0.75.0\nWhat could be so interesting about upgrading Hugo that I decided to write a blog post about it? Well, like most SDK upgrades, there\u0026rsquo;s always more than meets the eye. Thus for Hugo, a seemingly five second version bump quickly spiraled into countless minutes of troubleshooting and debugging.\nTo upgrade Hugo, I ran brew install hugo , which inevitably auto-updated my Homebrew version and downloaded the latest Hugo version.\nThen, the error about an another version is already linked decided to pop up: After some research, the error is thrown because homebrew core and task folders are shallow clones: This might cause a homebrew update if it\u0026rsquo;s too old. Given the latest changes on GitHub to restrict large repositories from auto-updating shallow clones, you might need to manually update Homebrew and links to the appropriate folders.\nAfter updating, you should run these two commands back to back:\n1git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core fetch --unshallow 1git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask fetch --unshallow The next step is to unlink the existing version of Hugo from homebrew via the following command:\n1brew unlink hugo then link Hugo again so it can point to the latest version:\n1brew link hugo Voila! Now Hugo is successfully updated to its latest version.\nStay tuned for a blog post about migrating themes in Hugo.\n","date":"Sep 8, 2021","permalink":"https://cupsofcode.com/post/story_of_upgrading_hugo/","series":null,"tags":["hugo","web"],"title":"Story of Upgrading Hugo"},{"categories":["Web Development"],"content":"Link in Bio landing pages became very popular since Instagram limited only single URL per profile info. Luckily, Hugo makes creating those social landing pages a walk in the park. It\u0026rsquo;s so simple, that in just under 10 minutes, you\u0026rsquo;ll have your own custom Link in Bio page up and running.\n Table Of Contents:   Shortcode in Hugo Shortcode structure and parameters How to access a parameter in shortcode Custom shortcode in Hugo Embed Bio Link from Canva Hugo shortcode template result Gotchas Conclusion    Shortcode in Hugo For building custom UI templates (in our case it‚Äôs a custom Link in Bio), Hugo provides shortcodes .\nA shortcode is a simple snippet inside a content file that Hugo will render using a predefined template.\nHugo already comes with neat built-in shortcodes that you can use to embed videos, images, tweets, etc.\nShortcode structure and parameters In a nutshell, shortcode is a HTML file with a custom layout. So it‚Äôs structured the same way as any html file. Shortcodes can be updated anytime to reflect new classes, techniques, or standards. At the point of site generation, Hugo shortcodes will easily merge the changes together.\nIn Shortcode, there are three types of parameters that can be utilized:\n Named parameters, which are parameters with custom names given by you. While using shortcode, the amount of parameters you create can add up. So it\u0026rsquo;s always best to name them to avoid confusion down the road. Positional parameter, which is a parameter based on the position. Flexible parameter, which is used whenever you‚Äôd like to set a default value to a parameter that can be later overridden by others.  How to access a parameter in shortcode In a shortcode file(html file), all of its parameters can be accessed via the .Get method. To access a named parameter, call:\n1{{ .Get \u0026#34;name\u0026#34; }} To access a second positional parameter, call:\n1{{ .Get 1 }} For the first positional parameter - 0 should be passed, and so on.\nCustom shortcode in Hugo To create own custom shortcode follow the steps:\nStep 1:\nCreate a shortcodes folder inside the layouts folder: layouts/shortcodes\nStep 2:\nInside the shortcodes folder, create a HTML file with the desired UI elements; The name of the HTML file will be the name of the custom shortcode(without the .html extension) .\nCustom html:\n1{{- $msg := .Get 0 -}} 2 3\u0026lt;div class=\u0026#34;social-link\u0026#34; \u0026gt; 4 \u0026lt;img style=\u0026#34;max-width: 100%\u0026#34; src=\u0026#34;/images/social_background.jpg\u0026#34;\u0026gt; 5 \u0026lt;div class=\u0026#34;button-container\u0026#34; \u0026gt; 6 7 \u0026lt;a class=\u0026#34;social-button main-color\u0026#34;\u0026gt;‚ú® {{ $msg }} ‚ú®\u0026lt;/a\u0026gt; 8 9 \u0026lt;a class=\u0026#34;social-button dark-accent\u0026#34;\u0026gt;üíØ Text 2 üíØ\u0026lt;/a\u0026gt; 10 11 \u0026lt;a class=\u0026#34;social-button dark-shade\u0026#34;\u0026gt;üéâ Text 3 üéâ\u0026lt;/a\u0026gt; 12 13 \u0026lt;div class=\u0026#34;social-media-container\u0026#34; \u0026gt; 14 \u0026lt;a class=\u0026#34;social-button light-shade\u0026#34;\u0026gt;üìπ Text 4 üìπ\u0026lt;/a\u0026gt; 15 \u0026lt;a class=\u0026#34;social-button light-shade\u0026#34;\u0026gt;üì∏ Text 5 üì∏\u0026lt;/a\u0026gt; 16 \u0026lt;/div\u0026gt; 17 \u0026lt;/div\u0026gt; 18 19\u0026lt;/div\u0026gt; Note: $msg is a variable and the value of it is a shortcode parameter at position 0.\nStep 3:\nProvide custom css properties in assets/css or assets/scss to the html elements.\nStep 4:\nCreate a content file(.md). If you‚Äôd like to place the social landing page right after your domain name (veryCoolWebsite.com/social), then the content file should be placed in the contents folder.\nStep 5:\nUse a newly created shortcode in your content file( .md)\n1{{\u0026lt; nameOfTheShortCodeFromFolder parameters \u0026gt;}} Shortcode parameters are space delimited, and parameters with internal spaces can be quoted.\nExample:\n1{{\u0026lt; social_link \u0026#34;Read my latest blog post\u0026#34; \u0026gt;}} Step 6:\nSave the changes and check the results on your localhost. You might need to tweak css here and there, however at this point, you‚Äôve completed creating your custom Bio Link page üëèüëèüëè!\nEmbed Bio Link from Canva If creating an html file, positioning the elements, and applying css values is not your cup of tea; you can always opt-in to design solutions out there. For example, Canva has a list of great templates for Bio Link. And you can publish any of the templates as a website.\nNow here is a neat little trick on Canva: after publishing, you can copy the embed code and place it in your custom shortcode file(step 2). To do so, follow the steps:\n Click on the ‚ÄúCreate Design‚Äù button on the top right corner of Canva \u0026rsquo;s homepage, and search for ‚ÄúBio Link‚Äù. Choose a template and edit as you desire. Click on ‚ÄúPublish as Website‚Äù on the top right corner (the website should be published at this point). Click on Three Dots on the top right corner. Search for ‚Äúembed‚Äù and select it. Copy ‚ÄúHTML embed code‚Äù. Place the copied snippet into the custom shortcode html file.  With this solution you don‚Äôt need to worry about colors, text, etc. Plus you don‚Äôt need to deploy anything, you can just edit your canva file.\nJust like Canva, there are millions of other solutions out there that can be used for your unique design.\nHugo shortcode template result If you‚Äôd like to see the final result of my custom Link in Bio, check out my social page .\nGotchas Although the actual building and deploying took less than 10 minutes, there were obviously some gotchas that made me go through rabbit hole of issues on the web:\n Shortcodes will not work in template files . They work in content files (inside the content folder) background-image that I set on my parent container div unfortunately wasn‚Äôt picked up by mobile browsers(Google chrome or mobile Safari) on either iOS or Android. Found online, some people using hugo reported the issue that is basically linked all the way to browsers' issue . Apparently this has been a known issue in the web community since the bug was opened more than 10 years ago. I tried to override background-attachment, set background-position, modify background-size , but nothing worked. The image still refused to appear on mobile devices.  Instead of setting background-image on container, I decided to add img child to my container:\n1\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 2 3\u0026lt;img src=\u0026#34;/images/social_background.jpg\u0026#34;\u0026gt; 4 5.... buttons.... 6 7\u0026lt;/div\u0026gt; In css set the height of the container to be 100%:\n1.container { 2 position: relative; 3 height: 100%; 4 width: 100%; 5} And it worked üéâ!\nLesson learned: In Hugo (I assume everywhere in web as well) if you want to apply custom background image to your container, DON‚ÄôT go for the obvious solution to set background-image property - create a separate img element inside the container.\nConclusion Shortcodes are code snippets that can be instrumental in creating eye-catching and interactive UI elements for your content. And by following the above steps, you‚Äôll be able to have your Link in Bio up and running in no time.\n","date":"Aug 9, 2021","permalink":"https://cupsofcode.com/post/how_to_build_custom_link_in_bio_landing_social_page/","series":null,"tags":["hugo","web"],"title":"How to Create Your Custom Link in Bio Landing Page in Hugo Under 10 Mins"},{"categories":["Career"],"content":"Finding a job is never easy - finding the first job is a thousand times harder. Getting those automatic rejection emails without having a chance to interview can be an emotional roller-coaster that makes you doubt your skills, abilities, and intentions. This is why striving for visibility is key when trying to land that first job interview.\nThe greater the number of people who view your resume, the greater the chance of being offered an interview - it\u0026rsquo;s as simple as that. Thus knowing how to be visible in a sea of other candidates like yourself is detrimental to getting a positive response to your application.\nHere are three tips that will help you stand out and be invited to the technical rounds of interviews.\n Table Of Contents:   1. New Grad, Internship, and Returnship sections in career page 2. Quantity over quality 3. Make Github your best friend    1. New Grad, Internship, and Returnship sections in career page Every major company has separate sections for:\n New grads [for people who graduated last year or are going to graduate in the upcoming summer] Internships [for students who are still in the process of getting their knowledge] Returnships [for people who left the workplace for some time and now they‚Äôre returning back].  There are usually deadlines when to apply based on the company. If deadlines are not mentioned - you can get in touch with the recruiting team(every career page has some sort of \u0026ldquo;Contact us\u0026rdquo; section). In the case of a missing \u0026ldquo;contact us\u0026rdquo; page - then you can get in touch with the company via social media. This will help you get in the bucket with the rest of the new grads.\nIf you have no experience, not even an internship - I suggest adding a small note alongside your application that states you\u0026rsquo;re open for one. The response rate works well with smaller companies, where hiring managers directly review the application.\n2. Quantity over quality Apply at as many places as possible. Don\u0026rsquo;t disregard small companies.\nSet a goal to apply to at least 20 companies a day. Set a goal to keep reapplying to the same company if needed.\nIt all may seem repetitive and/or redundant, but as mentioned earlier, recruiting is a number\u0026rsquo;s game - so the point is to get visible.\n3. Make Github your best friend Aside from learning the essentials of the git version control system, you should also focus on capitalizing Github ‚Äôs wonderful exposure to the programming world. Being publicly active on Github shows tech recruiters and observing developers that you‚Äôre genuinely interested in programming. So here are 2 ways how you can do just that:\n  Reporting/fixing issues on open-source projects whether it‚Äôs through code changes or through documentation (even if it‚Äôs just grammar corrections), is a great way to show that you‚Äôre ready to contribute to a company‚Äôs product.\n  Creating your own project from scratch and pushing it to Github is probably the most important requirement for achieving the best visibility possible. Just ensure you treat this personal project with standard industry practices such as not committing private API keys, leaving adequate documentation, formatting your code, unit tests, etc.\n   Remember, it took Thomas Jefferson 1000 failed attempts to make a light bulb. Similarly, it may take you 1000 rejections before finally getting a job offer.\nIt won\u0026rsquo;t be easy, but by persistently following the above tips, your visibility to recruiters will shine exponentially, and with it, your chances of landing that job interview!\n P.S. Huge thanks to Eugenio Lopez for being so patient and reviewing the article many times üôè\n","date":"Jun 30, 2021","permalink":"https://cupsofcode.com/post/how_to_get_first_interviews_as_a_software_engineer/","series":null,"tags":["early career"],"title":"How to Get Your First Interviews as a Software Engineer"},{"categories":["Android Development"],"content":"Featured in Android Weekly Issue #472.    Table Of Contents:   Disposable CompositeDisposable SerialDisposable Conclusion    Disposable RxJava 2 introduced the concept of Disposables .\nDisposables are streams/links/connections between Observer and Observable. They\u0026rsquo;re meant to give power to the Observers to control Observables. In most cases, the Observer is a UI element, ie; Fragment, Activity, or a corresponding viewmodel of those elements. While Observable represents a data flow where data can be passed from one source to another and get modified along the way if needed.\nSometimes that data flow can be long-running api requests, or can be listening to the updates in the database, and by the time you get a response or a value gets emitted - the screen that made a request might already be closed. In this case, you might end up with a memory leak, or even a crash - depending on your implementation.\nSo in order to avoid these issues, it is important that ui elements which are aware of Android Lifecycles, dispose their data flows when they‚Äôre not needed anymore, even if no response was emitted yet. That\u0026rsquo;s where Disposable comes handy.\nDisposable itself is an interface that comes with dispose() and isDisposed() functions. In RxJava 1 there was a Subscription interface that had the same functionality. RxJava 3 introduced additional operations .\nThis is how to declare and assign a disposable within a Fragment:\n1 private lateinit var disposable: Disposable 2 3 override fun onViewCreated(view: View, savedInstanceState: Bundle?) { 4 super.onViewCreated(view, savedInstanceState) 5 6 disposable = api.getPosts() 7 .observeOn(AndroidSchedulers.mainThread()) 8 .subscribe({ posts -\u0026gt; 9 println(posts) 10 }, { throwable -\u0026gt; 11 println(throwable) 12 }) 13 } And below is the sample code to dispose the observable when the fragment\u0026rsquo;s view is destroyed; therefore, there is no subscriber listening to the changes:\n1 override fun onDestroyView() { 2 if(this::disposable.isInitialized \u0026amp;\u0026amp; !disposable.isDisposed) { 3 disposable.dispose() 4 } 5 super.onDestroyView() 6 } CompositeDisposable As an app evolves and grows, it may require getting data from multiple sources. For example, Instagram Feed screen has the endpoint to get the list of the posts and another endpoint to get the list of stories(you can notice how these two parts get updated asynchronously and don\u0026rsquo;t depend on each other üòâ). The list of additional data flows can be big or small.\nInstead of declaring and initializing each disposable for those data flows, RxJava 2 introduced a CompositeDisposable class to bundle multiple Disposables that can be disposed all at once. It\u0026rsquo;s basically the class that holds a collection of disposables and also offers O(1) time complexity for add(Disposable), remove(Disposable), delete(Disposable) operations.\nLet\u0026rsquo;s continue with the example above, and add getStories() call:\n1 private val compositeDisposable by lazy { 2 CompositeDisposable() 3 } 4 5 override fun onViewCreated(view: View, savedInstanceState: Bundle?) { 6 super.onViewCreated(view, savedInstanceState) 7 8 compositeDisposable.add( 9 api.getPosts() 10 .observeOn(AndroidSchedulers.mainThread()) 11 .subscribe({ posts -\u0026gt; 12 println(posts) 13 }, { throwable -\u0026gt; 14 println(throwable) 15 }) 16 ) 17 18 compositeDisposable.add( 19 api.getStories() 20 .observeOn(AndroidSchedulers.mainThread()) 21 .subscribe({ stories -\u0026gt; 22 println(stories) 23 }, { throwable -\u0026gt; 24 println(throwable) 25 }) 26 ) 27 } Upon onDestroyView() the CompositeDisposable gets cleared:\n1 override fun onDestroyView() { 2 compositeDisposable.clear() 3 super.onDestroyView() 4 } Unlike Disposable, CompositeDisposable has two ways of disposing subscriptions:\n dispose() clear()  Both operations dispose the previously contained subscriptions, but dispose() operation assigns true to the disposed variable, which later does not let you add, remove,or delete any other disposables.\nIf you have CompositeDisposable in fragments, then you should call clear() upon onDestroyView() because the fragment doesn\u0026rsquo;t get destroyed. It goes to the backstack, therefore you don\u0026rsquo;t need to create a new instance of CompositeDisposable every time when a fragment\u0026rsquo;s view is re-created.\nIf you have CompositeDisposable in activities, then call dispose() upon onDestroy().\nSerialDisposable While CompositeDisposable is quite popular due to its convenience, there is the lesser known SerialDisposable class, that RxJava 2 introduced. SerialDisposable is a disposable container that allows atomically updating/replacing the contained Disposable with another Disposable, disposing the old one when updating, and handling the disposition when the container itself is disposed.\nOr simply, whenever you want to replace the existing subscription with the new one - use SerialDisposable.\nFor example, Instagram has a search functionality where their api returns results for each search query. A user first typed in fru in EditText, saw an empty screen, and then finished typing the whole word fruits. Since there could be cases of unstable internet connections which can\u0026rsquo;t guarantee the order of network request/responses, in our use case, the first response came back for fruits, then the second response was for fru. Because the second response was the last response - ui renders the results of fru, which is confusing for the user since they now see more broader results than the specific fruits results.\nIn order to prevent these confusions, it\u0026rsquo;s better to use set() operation of SerialDisposable, which sets the latest disposable whenever the request happened and disposes the previous one:\n1 private val serialDisposable by lazy { 2 SerialDisposable() 3 } 4 5 override fun onViewCreated(view: View, savedInstanceState: Bundle?) { 6 super.onViewCreated(view, savedInstanceState) 7 8 view.editText.doAfterTextChanged { text -\u0026gt; 9 serialDisposable.set( 10 api.searchFor(text) 11 .observeOn(AndroidSchedulers.mainThread()) 12 .subscribe({ result -\u0026gt; 13 println(result) 14 }, { throwable -\u0026gt; 15 println(throwable) 16 }) 17 ) 18 } 19 } Operation replace() on the other hand, does not dispose the previous disposable, which means the result of it will be emitted upon subscribe().\nThink of SeriaDisposable  as a manual version of switchMap() operator, that you can use to glue your ui callbacks and reactive data flows.\nConclusion In conclusion, ui elements can subscribe to observables and decide when to listen to its changes and when not to. Whenever the ui element gets removed from the content view, it\u0026rsquo;s important to dispose all of its subscriptions, otherwise they will cause a memory leak.\nRxJava provides Disposable to manage the subscriptions. It also has CompositeDisposable and SerialDisposable classes that implement Disposable.\nCompositeDisposable is a container that can hold multiple disposables and dispose them all at once.\nSerialDisposable is a container that is used to replace the current disposable with the new one.\n I hope this post was helpful. If you have questions or something is unclear - please leave a comment!\n","date":"Jun 20, 2021","permalink":"https://cupsofcode.com/post/when_how_use_rxjava_disposable_serialdisposable_compositedisposable/","series":null,"tags":["android","rx"],"title":"When and How to Use RxJava Disposable"},{"categories":null,"content":"There are so many different courses, tutorials, and instructions out there for you to learn mobile development. In the sea of options, it‚Äôs important to understand what will help you be ready in the professional workplace and excel in programming.\nWhile there are some teachers that can explain the concept well, you may leave the class asking yourself how can you apply this knowledge. And it‚Äôs because these teachers don‚Äôt have the experience building and shipping professional apps. It‚Äôs like knowing all theory, but not actual practice.\nThere are also some great professionals who share their knowledge and tutorials (mostly on Udemy) that are so advanced, it may leave you wondering whether you‚Äôre capable of learning anything or not. And it‚Äôs not you, it‚Äôs the profesional. Unfortunately, some senior developers forget what it was like to be a beginner. Thus, they create tutorials to solve problems while falsely assuming that their reader knows the underlying framework to their proposed solution\nAnd that‚Äôs why finding a truly great course, that will help you excel at learning and understanding software development is very important. I really like what Udacity has been doing so far. They combine both, teacher and professional perspectives, to help you learn properly.\n In fact, I liked their approach so much that last year I decided to collaborate with them in making an Android Kotlin Developer Nanodegree . The main difference of the nanodegree is at the end of each lesson and chapter there are projects, that have been developed by professionals, like me, based on the previous experience building and releasing apps.\n And to be honest with you, it was not easy to explain things in plain English without any technical jargon. With tremendous help from Udacity, we‚Äôve nailed down the course, so everyone can just take it and start building their own Android apps. Make sure to check out the degree , and if you have any questions about ‚ÄúAdvanced Android Apps with Kotlin, Part 1‚Äù, just ping me, because I worked on it =).\nFor those, who are in the beginning of their journey to become an Android Developer, I\u0026rsquo;d recommend looking at \u0026ldquo;Android Basics\u0026rdquo; . It covers all the basics of Android Framework and it will help you to get comfortable with Android.\nIf you\u0026rsquo;re thinking to swing to the dark side and become an iOS Developer, then definitely check out this nanodegree .\nSoftware development is a continuous education. Don‚Äôt assume after finishing these nanodegrees, you‚Äôll know everything. It is just the beginning. You‚Äôll learn so much as you go, and that‚Äôs the beauty of working as a developer - you get paid to keep learning.\n","date":"Mar 15, 2021","permalink":"https://cupsofcode.com/courses/","series":null,"tags":null,"title":"How to Choose Mobile App Development Course Online?"},{"categories":["Android Development"],"content":"These days, most startup apps heavily rely on third-party libraries to send push notifications to a user, thus causing developers to usually not pay too much attention to Android notification changes.\nFor example, I was working on my side-project which sends a notification once the download is completed (was checking how DownloadManager works).\nBack in 2016, you\u0026rsquo;d need to initialize NotificationManager and pending intent if notification contains custom action:\n1private lateinit var notificationManager: NotificationManager 2private lateinit var pendingIntent: PendingIntent 3 4override fun onCreate(savedInstanceState: Bundle?) { 5 ... 6 notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager 7 8 val intent = Intent(this, DetailActivity::class.java) 9 pendingIntent = 10 PendingIntent.getActivity(this, 1, intent, PendingIntent.FLAG_UPDATE_CURRENT) 11} And then after download is complete, you\u0026rsquo;d need to build the notification, include pendingIntent and send it to notification manager:\n1val builder = NotificationCompat.Builder(context) 2 .setSmallIcon(R.drawable.ic_assistant_black_24dp) 3 .setContentTitle(getString(R.string.notification_title)) 4 .setContentText(getString(R.string.notification_description)) 5 .setPriority(NotificationCompat.PRIORITY_MAX) 6 .addAction(R.drawable.icon, getString(R.string.notification_button), pendingIntent) 7 8notificationManager.notify(1, builder.build()) After writing code and running the app, the notification wasn\u0026rsquo;t getting displayed. I thought maybe I was incorrectly implementing DownloadManager since I had just started playing around with it. So, after some debugging, I saw that the DownloadManager worked flawlessly and notificationBuilder did in-fact get called, but nothing was displayed ü§¶‚Äç. The next obvious step was to google the issue. The first stackOverflow answer mentioned the following change in NotificationManager for Android O and above.\nüí°So for the devices running on Android O and above, it\u0026rsquo;s required to create a channel for different kind of notifications where id, name and importance should be passed in constructor:\noverride fun onCreate(savedInstanceState: Bundle?) { ... notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager if (Build.VERSION.SDK_INT \u0026gt;= Build.VERSION_CODES.O) { val channel = NotificationChannel( CHANNEL_ID, getString(R.string.notification_title), NotificationManager.IMPORTANCE_HIGH ) notificationManager.createNotificationChannel(channel) } } The same channel id should be passed in notificationBuilder\u0026rsquo;s constructor alongside with context: val builder = NotificationCompat.Builder(context, CHANNEL_ID)\nMade the changes, the notification got displayed! But the action button didn\u0026rsquo;t work üòí. After another round of googling, I found out the addAction method in notificationBuilder now requires an Action class, which is basically a wrapper of the arguments addAction method used to accept.\nThe full code of sending and displaying notifications nowadays is below:\nprivate lateinit var notificationManager: NotificationManager private lateinit var action: NotificationCompat.Action override fun onCreate(savedInstanceState: Bundle?) { ... notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager if (Build.VERSION.SDK_INT \u0026gt;= Build.VERSION_CODES.O) { val channel = NotificationChannel( CHANNEL_ID, getString(R.string.notification_title), NotificationManager.IMPORTANCE_HIGH ) notificationManager.createNotificationChannel(channel) } val intent = Intent(this, DetailActivity::class.java) val pendingIntent = PendingIntent.getActivity(this, 1, intent, PendingIntent.FLAG_UPDATE_CURRENT) action = NotificationCompat.Action.Builder( R.drawable.icon, getString(R.string.notification_button), pendingIntent ).build() } ... private fun downloadCompleted() { val builder = NotificationCompat.Builder(context, CHANNEL_ID) .setSmallIcon(R.drawable.ic_assistant_black_24dp) .setContentTitle(getString(R.string.notification_title)) .setContentText(getString(R.string.notification_description)) .setPriority(NotificationCompat.PRIORITY_MAX) .addAction(action) notificationManager.notify(1, builder.build()) } Hopefully, this article was helpful and stay tuned for another then-and-now article!\n","date":"Mar 1, 2020","permalink":"https://cupsofcode.com/post/how-to-display-notification-in-2020/","series":null,"tags":["android"],"title":"How to Display Notifications in 2020"},{"categories":["Personal"],"content":"There is a saying in Russian ‚Äú–∫–∞–∫ –ª–æ–¥–∫—É –Ω–∞–∑–æ–≤–µ—à—å, —Ç–∞–∫ –æ–Ω–∞ –∏ –ø–æ–ø–ª—ã–≤–µ—Ç‚Äù[a boat sails in accordance with its name]. So January 1st I declared the 2019 to be more bold, tenacious and eager. And oh, has it been! 2019 was a roller-coaster of challenges and rewards.\nA few things have shaped this year:\n  Personally, I hardly ever ask people for anything I want or need. But I can definitely ask someone to do a favor to help family, friends, and colleagues. My parents taught me to put your head down, work hard, and you‚Äôll get rewarded. Unfortunately, it‚Äôs not always enough. This year I‚Äôm proud of myself for stepping up and being vocal about my needs and intentions. A perfect example was asking for my promotion.\n  Another act of courage I made was when I submitted my first abstract for #AndroidSummit conference this year with what I thought was a zero chance of it being selected. But to my surprise, it was. This is a big one[‚ùó]. I haven‚Äôt done public speaking in 8 years. And haven‚Äôt done it in english for‚Ä¶ about my entire life. Thus me being a perfectionist, I made sure not to rest a day to kick it in overdrive every day for a month and a half until I wrapped up all my research into a structured paper and began religiously rehearsing the talk over and over. Then, on the day of the talk, anxiety and nervousness kicked in full speed, but somehow I managed to pull through. Two months later, I got an email my talk was selected for GDG #DevFest in Sydney, Australia. I was crazy excited. This was my first international and remote talk. But thankfully, it went through very smoothly. A week later, two of my talks were selected for #DroidconSF . I‚Äôve watched many videos about tech talks and decided to follow the tips from them. A lesson learned: do not watch any videos like these before your actual talk, it‚Äôll mess your head up.\n  My talk at #DroidconSF, which I had already given twice in the past, went terribly. I‚Äôm talking stuttering, rough transitions between my Keynote slides, and the whole first verse from Eminem‚Äôs Lose Yourself. This was my third time giving the talk, yet for some reason, it went down-hill compared to my first time. That should had not been the case. So I apologized in the middle of the talk ü§¶. Yes, it did fit a stereotype about females always saying sorry. Yes, in a professional world, you keep going as it was planned. Since then, I‚Äôve gotten many feedback that I shouldn\u0026rsquo;t apologized, but it happened. However more importantly, I‚Äôve apologized to myself, because it didn‚Äôt meet my expectations. Was it right doing so, or wrong - I still don‚Äôt know.\n  My most important part of speaking this year was to recruit females in STEM. Yes, you might think what a big deal, everybody is hiring females nowadays to even the gender disbalance. But being honest and straightforward with a candidate, while still convincing them to join a company takes a lot of work. From the bright minds of the Grace Hopper program, to the interns at America\u0026rsquo;s the top universities, I‚Äôm so glad to meet each of you, and hope to see you in my team next year.\n  There is a special feeling I get every time when a female developer comes up and gives me feedback and support. I don‚Äôt know how to explain it, but it calms me down a lot. It is unique üíö. Hope to give and receive many more of it next year. P.S. Please remember, regardless of the gender I will always appreciate any feedback.\n  For this year I had only two goals: to speak at one conference and to write one article. I‚Äôm happy to achieve both. Years of trials and fails at new year resolutions taught me a great lesson: choosing only one goal is small. You‚Äôll just keep pushing it off to the side since you have twelve months to complete it until there aren\u0026rsquo;t any months lefts. Choosing more than two goals makes you anxious, which doesn‚Äôt help to achieve even one of them. Two is perfect - it gives just enough time to procrastinate. Yet, gives just the right amount of urgency to get yourself to reach both goals!\nAs the year [and decade] comes to an end, I‚Äôd like to thank #androidCommunity for the welcoming and continuous support, and I‚Äôm immensely grateful to be part of this amazing community! Let‚Äôs keep this up, 2020 üí™!\n","date":"Dec 31, 2019","permalink":"https://cupsofcode.com/post/recap-of-2019/","series":null,"tags":null,"title":"Recap of 2019: The Art of Speaking"},{"categories":["Android Development"],"content":"This article is based off my talk at Droidcon SF this year. Kotlin is well-known for null-safety and extension functions features among android developers. Extension functions provide the ability to make new functionality of an extending class without making changes to it. In addition, the new functionality can be declared outside of the extending class. They\u0026rsquo;re also very beneficial when you want to tweak an api that can\u0026rsquo;t be modified.\nWriting a good extension function comes with practice, and there are no universal rules on how or when to make them. Every developer declares the rules for themselves based on the business need of an app. But regardless of what the needs are, there are some rules I\u0026rsquo;ve set for myself.\nLet\u0026rsquo;s go over some sad examples of making extensions:\nExtending android and java common types to meet business logic This reasoning comes up as a quick solution for many of us. But down the road, it\u0026rsquo;ll get dirty and unmanageable. fun CharSequence.toAnimal(): Animal { return Animal( id = this.toString(), name = this.toString(), logo = \u0026#34;\u0026#34;, isDomestic = false, inRedList = false, description = this.toString() ) }\nInstead I\u0026rsquo;d recommend to separate business and common types. Extension functions are great for mapping business to business logic: fun WildAnimal.toAnimal(): Animal { return Animal( id = id, name = name, logo = logo, isDomestic = false, description = shortDescription, inRedList = inRedList ) }\nor common to common: @kotlin.internal.InlineOnly public inline fun String.toPattern(flags: Int = 0): java.util.regex.Pattern { return java.util.regex.Pattern.compile(this, flags) }\nModifying members of an extending class Extension functions are meant to extend a class with new functionality, not to modify or insert members into it.\nfun MainActivity.showWhiteLoadingIndicator() { mNumActiveLoadingIndicators++ runOnUiThread { . . . } } In the example above, extension function showWhiteLoadingIndicator() is incrementing a member of MainActivity mNumActiveLoadingIndicators.\nclass MainActivity : AppCompatActivity() { var mNumActiveLoadingIndicators: Int = 0 } Although this might work and some developers do practice it, making an extension function out of it seems as an overhead to me. No one cancelled out regular member functions, which can help you achieve the same functionality in the end.\nclass MainActivity : AppCompatActivity() { var mNumActiveLoadingIndicators: Int = 0 fun showWhiteLoadingIndicator() { mNumActiveLoadingIndicators++ runOnUiThread { . . . } } Using the same name as a member function This is not a sad example, more of a caution to developers, who are switching to Kotlin and trying out extension functions. When making an extension function, be careful with naming. If it matches a member function, and is applicable to given arguments, compiler will choose the member function over an extension function.\n@RemotableViewMethod public void setBackgroundColor(@ColorInt int color) { if (mBackground instanceof ColorDrawable) { ((ColorDrawable) mBackground.mutate()).setColor(color); computeOpaqueFlags(); mBackgroundResource = 0; } else { setBackground(new ColorDrawable(color)); } } setBackgroundColor(@ColorInt int color) is a member function of View class in android, and it accepts argument of type int. Now if we look at the below extension function, the name and argument type match the member function.\nfun View.setBackgroundColor(colorResId: Int) { setBackgroundColor( ContextCompat.getColor( context, colorResId ) ) } Instead, the easiest solution will be to rename the extension function:\nfun View.setBackgroundColorResId(colorId: Int) { setBackgroundColor( ContextCompat.getColor( context, colorId ) ) } Extending context on every occasion We have all heard that the best way to start converting your app to kotlin is by converting util or helper methods into extension functions. Most likely, those methods at some point require the context to be passed: public static void showGif(String url, Context context, ImageView imageView) { Glide.with(context).asGif() .listener(new RequestListener\u0026lt;GifDrawable\u0026gt;() { @Override public boolean onLoadFailed(@Nullable GlideException e, Object model, Target\u0026lt;GifDrawable\u0026gt; target, boolean isFirstResource) { return false; } @Override public boolean onResourceReady(GifDrawable resource, Object model, Target\u0026lt;GifDrawable\u0026gt; target, DataSource dataSource, boolean isFirstResource) { return false; } }) .load(url) .into(imageView); }\nAnd naturally, the first thought is to extend the context where the rest of parameters can be passed to it: fun Context.showGif(imageView: ImageView, url: String) { Glide.with(this) .asGif() .listener(object : RequestListener\u0026lt;GifDrawable\u0026gt; { override fun onLoadFailed(e: GlideException?, model: Any?, target: Target\u0026lt;GifDrawable\u0026gt;?,isFirstResource: Boolean ) = false override fun onResourceReady(resource: GifDrawable?, model: Any?, target: Target\u0026lt;GifDrawable\u0026gt;?, dataSource: DataSource?, isFirstResource: Boolean ) = false }) .load(url) .into(imageView) }\nAt first glance, compiler doesn‚Äôt give any errors, the code runs, and the same functionality is preserved. But if we look at the docs, we can see that the ImageView class already has a member function, that returns a type Context. Therefore we can retrieve context directly from it by extending Imageview: fun ImageView.asGif(url: String) { Glide.with(this.context) .asGif() .listener(object : RequestListener\u0026lt;GifDrawable\u0026gt; { override fun onLoadFailed(e: GlideException?, model: Any?, target: Target\u0026lt;GifDrawable\u0026gt;?, isFirstResource: Boolean ) = false override fun onResourceReady(resource: GifDrawable?, model: Any?, target: Target\u0026lt;GifDrawable\u0026gt;?, dataSource: DataSource?, isFirstResource: Boolean ) = false }) .load(url) .into(this) }\nAnother case I commonly see is to extend context to display some other views: fun Context.showDialog(message: String, activity: Activity?) { if (activity != null \u0026amp;\u0026amp; !activity.isFinishing) { MaterialDialog.Builder(this) .content(message) .positiveText(\u0026#34;Ok\u0026#34;) .show() } }\nBe aware, that by extending Context, you\u0026rsquo;re letting every other context subclass that doesn\u0026rsquo;t have access to Window class have the ability to call the extension function. For instance, you can access context inside service, therefore you can call context.showDialog(), but dialog needs to be drawn on window, that needs an access to content which lives on activity, therefore calling showDialog() in service will crash.\nNow about some good practices:\nMaking an extension function out of a nullable receiver public actual fun String?.equals(other: String?, ignoreCase: Boolean = false): Boolean { if (this === null) return other === null return if (!ignoreCase) (this as java.lang.String).equals(other) else (this as java.lang.String).equalsIgnoreCase(other) } Adding iterators via extension functions This is a perfect example of extending a limited api: inline fun Menu.forEach(action: (item: MenuItem) -\u0026gt; Unit) { for (index in 0 until size()) { action(getItem(index)) } }\nConverting from one interface to another public fun \u0026lt;K, V\u0026gt; Map\u0026lt;out K, V\u0026gt;.asSequence(): Sequence\u0026lt;Map.Entry\u0026lt;K, V\u0026gt;\u0026gt; { return entries.asSequence() } It\u0026rsquo;s important to structure extension functions properly. For example, I usually create a file that contains all extension functions of a receiver type. It\u0026rsquo;s easy down the road for new developers in the team to not make duplicated functions, and also easy to copy a file from one project to another üòÑ .\nCode samples can be found here Huge thanks to Eugenio Lopez for being so patient and reviewing the article many times üôè\n","date":"Dec 29, 2019","permalink":"https://cupsofcode.com/post/good-and-sad-extensions/","series":null,"tags":["android","kotlin"],"title":"Good and Sad Examples of Extension Functions"},{"categories":null,"content":"The list of the talks I\u0026rsquo;ve given in the past. They\u0026rsquo;re primarily focused on Android Development and Kotlin language. If you would like me to speak at your event, please fill out this form .\n Table Of Contents:   2021 2020 2019    2021    Name Conference/Meetup Location Date Video¬† Slides     Employment and Employability Trends Asia Pacific University Of Technology and Innovation  Kuala-Lumpur, Malaysia March 2021 \u0026mdash; \u0026mdash;   MVI in a nutshell Women Developer Academy  USA, North America May 2021 \u0026mdash; Slides    Why would teachers want to know about coding Android Apps? Coding Android Apps in Kotlin USA, North America June 2021   Slides    The MOST BASIC Function Coding Android Apps in Kotlin USA, North America June 2021   Slides    What is Android Studio Coding Android Apps in Kotlin USA, North America June 2021   Slides    What is GIT version control system Coding Android Apps in Kotlin USA, North America July 2021   Slides    Kotlin and Github. Simple Project Coding Android Apps in Kotlin USA, North America July 2021   Slides    How to become an Android Developer Ulysses High School 214 Ulysses, KS, USA September 2021   Slides    Intro to Jetpack Compose  Google Developer Student Club  La Paz, Bolivia October 2021 Video  Slides    Most Valuable (Architecture) Idea  Women Who Code  North East, USA December 2021   Slides     2020 How it started: üö•üö•üö•üö•üö•üö•üö•üö•üö•üö•üö•üö•üö•\nWhat #AndroidDev conferences are open for remote talks this yearü§î? üö•üö•üö•üö•üö•üö•üö•üö•üö•üö•üö•üö•üö•\n\u0026mdash; Aida (@Aida_Isay) January 14, 2020  How it ended: An update on KotlinConf - Last year we made the decision to cancel KotlinConf 2020 early on, and postpone the event to 2021. Unfortunately it does not look like it will be possible to hold the event the way we\u0026#39;d like to in 2021 either. (1/4)\n\u0026mdash; KotlinConf (@kotlinconf) January 27, 2021  2019    Name Conference/Meetup Location Date Video¬† Slides     Reactive approach to delegation in Kotlin Android Summit  McLean, VA, USA August 2019    Slides    Reactive approach to delegation in Kotlin GDG DevFest  Sydney, Australia November 2019 \u0026mdash; Slides    Reactive approach to delegation in Kotlin Droidcon SF  San Francisco, CA, USA November 2019    Slides    Level up your extension game Droidcon SF  San Francisco, CA, USA November 2019    Slides     ","date":"Dec 23, 2019","permalink":"https://cupsofcode.com/talks/","series":null,"tags":null,"title":"Talks"},{"categories":null,"content":"Hi there üëã ! My name is Aida Issayeva. I\u0026rsquo;m a Sr.Android Engineer with over 6 years of experience building and scaling Android Apps from the ground up and total of 10 years of professional experience(as of March 2021).\n Table Of Contents:   Who am I Blogging Portfolio  Courses Apps   In the Media Work with me Request a content    Who am I So, what\u0026rsquo;s my story you ask?\nLet‚Äôs politely skip past birth, childhood, and early career (that‚Äôs for the memoir), and fast forward to the fateful moment in NYC in 2015 when I finally saved up enough to attend a small hybrid online bootcamp and learn Android Development.\nI\u0026rsquo;ve attended the bootcamp for about 2,5 months: 12-14 hours a day coding and 7 days a week and had to drop out, because I\u0026rsquo;ve received a software engineering internship offer from digital media agency Videri. At Videri I worked on various long-running apps for billboards, some of them were even on Times Square üòå. Then I received a full-time job offer from French-American vessel controlling agency CLS to work on their single app and moved to the DC area üè´. Over there I worked on building a sensor dashboard from vessels straight to the tablet app. The next company I worked for was a cloud-gaming startup üéÆ, LiquidSky. I built their android app from the scratch, where users can open the app and have access to all desktop games. After that, I moved to a finTech startup, Clarity Money, to build their personal finance management app üí∞. The startup later was acquired by Goldman Sachs, where I built their banking app, Marcus.\nSo, that\u0026rsquo;s my journey in a nutshell.\nBlogging I like to share tidbits of knowledge I\u0026rsquo;ve gathered throughout the years. Some of them may be very specific to Android development, some of them are about general software development, and some are about soft skills that are helpful in a career.\nAs you guessed most of my articles are published on this blog. Sometimes when I feel courageous enough, I give talks . And sometimes when I need to vent out, I post witty and sarcastic short videos about tech life on Tiktok .\nPortfolio Courses I\u0026rsquo;ve also collaborated with Udacity and curated Advanced Android Apps with Kotlin, Part 1 of Android Kotlin Developer Nanodegree .\nClick here to learn more about choosing best courses for mobile app development.\nApps Here is the list of apps I built, worked and released:\n1. Marcus, 2019 - 2021\nMobile banking app for Goldman Sachs Bank.  2. Clarity Money, 2017 - 2021\nPersonal finance management app. The app sunsetted on March 5th, 2021 and got transitioned into Marcus app.  3. LiquidSky, 2017\nMobile app to connect to any PC game in the cloud.  4. Thorium, 2016\nMobile app for Vessel Monitoring System, that gets connected via Iridium global satellite network.\n They range from satellite communication to finTech to cloud gaming service industries.\nIn the Media Below, I‚Äôll just note spaces where I‚Äôve been fortunate enough to be asked to share my voice on platforms that are run by others. This can be everything from online to print, video to podcasting:\n Interview for Udacity Blog  5-episode appearance on Alice Keeler\u0026rsquo;s podcast   Work with me Collaboration is my specialty. If you‚Äôve got an idea, it‚Äôs likely I can help you execute it in many different ways. Please fill out this form and I\u0026rsquo;ll get back to you within 2-3 days.\nRequest a content If there is any topic you\u0026rsquo;d like to learn more about, please file an issue on Github .\n","date":"Dec 15, 2019","permalink":"https://cupsofcode.com/about/","series":null,"tags":null,"title":"About Me"},{"categories":null,"content":"Check out the links below to find out how we can do great work together. ‚ú® Latest Blog Post ‚ú® üî• Get the newsletter üî• üíØ Let's work together üíØ üéâ Android Kotlin Nanodegree üéâ üìπ Tiktok üìπ üì∏ Insta üì∏    ","date":"Oct 24, 2019","permalink":"https://cupsofcode.com/social/","series":null,"tags":null,"title":""}]