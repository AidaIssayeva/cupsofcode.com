[{"categories":["Articles"],"content":"Finding a job is never easy - finding the first job is a thousand times harder. Getting those automatic rejection emails without having a chance to interview can be an emotional roller-coaster that makes you doubt your skills, abilities, and intentions. This is why striving for visibility is key when trying to land that first job interview.\nThe greater the number of people who view your resume, the greater the chance of being offered an interview - it\u0026rsquo;s as simple as that. Thus knowing how to be visible in a sea of other candidates like yourself is detrimental to getting a positive response to your application.\nHere are three tips that will help you stand out and be invited to the technical rounds of interviews.\n1. New Grad, Internship, and Returnship sections in career page Every major company has separate sections for:\n New grads [for people who graduated last year or are going to graduate in the upcoming summer] Internships [for students who are still in the process of getting their knowledge] Returnships [for people who left the workplace for some time and now they‚Äôre returning back].  There are usually deadlines when to apply based on the company. If deadlines are not mentioned - you can get in touch with the recruiting team(every career page has some sort of \u0026ldquo;Contact us\u0026rdquo; section). In the case of a missing \u0026ldquo;contact us\u0026rdquo; page - then you can get in touch with the company via social media. This will help you get in the bucket with the rest of the new grads.\nIf you have no experience, not even an internship - I suggest adding a small note alongside your application that states you\u0026rsquo;re open for one. The response rate works well with smaller companies, where hiring managers directly review the application.\n2. Quantity over quality Apply at as many places as possible. Don\u0026rsquo;t disregard small companies.\nSet a goal to apply to at least 20 companies a day. Set a goal to keep reapplying to the same company if needed.\nIt all may seem repetitive and/or redundant, but as mentioned earlier, recruiting is a number\u0026rsquo;s game - so the point is to get visible.\n3. Make Github your best friend Aside from learning the essentials of the git version control system, you should also focus on capitalizing Github ‚Äôs wonderful exposure to the programming world. Being publicly active on Github shows tech recruiters and observing developers that you‚Äôre genuinely interested in programming. So here are 2 ways how you can do just that:\n  Reporting/fixing issues on open-source projects whether it‚Äôs through code changes or through documentation (even if it‚Äôs just grammar corrections), is a great way to show that you‚Äôre ready to contribute to a company‚Äôs product.\n  Creating your own project from scratch and pushing it to Github is probably the most important requirement for achieving the best visibility possible. Just ensure you treat this personal project with standard industry practices such as not committing private API keys, leaving adequate documentation, formatting your code, unit tests, etc.\n   Remember, it took Thomas Jefferson 1000 failed attempts to make a light bulb. Similarly, it may take you 1000 rejections before finally getting a job offer.\nIt won\u0026rsquo;t be easy, but by persistently following the above tips, your visibility to recruiters will shine exponentially, and with it, your chances of landing that job interview!\n P.S. Huge thanks to Eugenio Lopez for being so patient and reviewing the article many times üôè\n","date":"Jun 30, 2021","permalink":"/posts/how_to_get_first_interviews_as_a_software_engineer/","series":null,"tags":null,"title":"How to Get Your First Interviews as a Software Engineer"},{"categories":["Tutorials"],"content":"Disposable RxJava 2 introduced the concept of Disposables .\nDisposables are streams/links/connections between Observer and Observable. They\u0026rsquo;re meant to give power to the Observers to control Observables. In most cases, the Observer is a UI element, ie; Fragment, Activity, or a corresponding viewmodel of those elements. While Observable represents a data flow where data can be passed from one source to another and get modified along the way if needed.\nSometimes that data flow can be long-running api requests, or can be listening to the updates in the database, and by the time you get a response or a value gets emitted - the screen that made a request might already be closed. In this case, you might end up with a memory leak, or even a crash - depending on your implementation.\nSo in order to avoid these issues, it is important that ui elements which are aware of Android Lifecycles, dispose their data flows when they‚Äôre not needed anymore, even if no response was emitted yet. That\u0026rsquo;s where Disposable comes handy.\nDisposable itself is an interface that comes with dispose() and isDisposed() functions. In RxJava 1 there was a Subscription interface that had the same functionality. RxJava 3 introduced additional operations .\nThis is how to declare and assign a disposable within a Fragment:\n1 private lateinit var disposable: Disposable 2 3 override fun onViewCreated(view: View, savedInstanceState: Bundle?) { 4 super.onViewCreated(view, savedInstanceState) 5 6 disposable = api.getPosts() 7 .observeOn(AndroidSchedulers.mainThread()) 8 .subscribe({ posts -\u0026gt; 9 println(posts) 10 }, { throwable -\u0026gt; 11 println(throwable) 12 }) 13 } And below is the sample code to dispose the observable when the fragment\u0026rsquo;s view is destroyed; therefore, there is no subscriber listening to the changes:\n1 override fun onDestroyView() { 2 if(this::disposable.isInitialized \u0026amp;\u0026amp; !disposable.isDisposed) { 3 disposable.dispose() 4 } 5 super.onDestroyView() 6 } CompositeDisposable As an app evolves and grows, it may require getting data from multiple sources. For example, Instagram Feed screen has the endpoint to get the list of the posts and another endpoint to get the list of stories(you can notice how these two parts get updated asynchronously and don\u0026rsquo;t depend on each other üòâ). The list of additional data flows can be big or small.\nInstead of declaring and initializing each disposable for those data flows, RxJava 2 introduced a CompositeDisposable class to bundle multiple Disposables that can be disposed all at once. It\u0026rsquo;s basically the class that holds a collection of disposables and also offers O(1) time complexity for add(Disposable), remove(Disposable), delete(Disposable) operations.\nLet\u0026rsquo;s continue with the example above, and add getStories() call:\n1 private val compositeDisposable by lazy { 2 CompositeDisposable() 3 } 4 5 override fun onViewCreated(view: View, savedInstanceState: Bundle?) { 6 super.onViewCreated(view, savedInstanceState) 7 8 compositeDisposable.add( 9 api.getPosts() 10 .observeOn(AndroidSchedulers.mainThread()) 11 .subscribe({ posts -\u0026gt; 12 println(posts) 13 }, { throwable -\u0026gt; 14 println(throwable) 15 }) 16 ) 17 18 compositeDisposable.add( 19 api.getStories() 20 .observeOn(AndroidSchedulers.mainThread()) 21 .subscribe({ stories -\u0026gt; 22 println(stories) 23 }, { throwable -\u0026gt; 24 println(throwable) 25 }) 26 ) 27 } Upon onDestroyView() the CompositeDisposable gets cleared:\n1 override fun onDestroyView() { 2 compositeDisposable.clear() 3 super.onDestroyView() 4 } Unlike Disposable, CompositeDisposable has two ways of disposing subscriptions:\n dispose() clear()  Both operations dispose the previously contained subscriptions, but dispose() operation assigns true to the disposed variable, which later does not let you add, remove,or delete any other disposables.\nIf you have CompositeDisposable in fragments, then you should call clear() upon onDestroyView() because the fragment doesn\u0026rsquo;t get destroyed. It goes to the backstack, therefore you don\u0026rsquo;t need to create a new instance of CompositeDisposable every time when a fragment\u0026rsquo;s view is re-created.\nIf you have CompositeDisposable in activities, then call dispose() upon onDestroy().\nSerialDisposable While CompositeDisposable is quite popular due to its convenience, there is the lesser known SerialDisposable class, that RxJava 2 introduced. SerialDisposable is a disposable container that allows atomically updating/replacing the contained Disposable with another Disposable, disposing the old one when updating, and handling the disposition when the container itself is disposed.\nOr simply, whenever you want to replace the existing subscription with the new one - use SerialDisposable.\nFor example, Instagram has a search functionality where their api returns results for each search query. A user first typed in fru in EditText, saw an empty screen, and then finished typing the whole word fruits. Since there could be cases of unstable internet connections which can\u0026rsquo;t guarantee the order of network request/responses, in our use case, the first response came back for fruits, then the second response was for fru. Because the second response was the last response - ui renders the results of fru, which is confusing for the user since they now see more broader results than the specific fruits results.\nIn order to prevent these confusions, it\u0026rsquo;s better to use set() operation of SerialDisposable, which sets the latest disposable whenever the request happened and disposes the previous one:\n1 private val serialDisposable by lazy { 2 SerialDisposable() 3 } 4 5 override fun onViewCreated(view: View, savedInstanceState: Bundle?) { 6 super.onViewCreated(view, savedInstanceState) 7 8 view.editText.doAfterTextChanged { text -\u0026gt; 9 serialDisposable.set( 10 api.searchFor(text) 11 .observeOn(AndroidSchedulers.mainThread()) 12 .subscribe({ result -\u0026gt; 13 println(result) 14 }, { throwable -\u0026gt; 15 println(throwable) 16 }) 17 ) 18 } 19 } Operation replace() on the other hand, does not dispose the previous disposable, which means the result of it will be emitted upon subscribe().\nThink of SeriaDisposable  as a manual version of switchMap() operator, that you can use to glue your ui callbacks and reactive data flows.\nConclusion In conclusion, ui elements can subscribe to observables and decide when to listen to its changes and when not to. Whenever the ui element gets removed from the content view, it\u0026rsquo;s important to dispose all of its subscriptions, otherwise they will cause a memory leak.\nRxJava provides Disposable to manage the subscriptions. It also has CompositeDisposable and SerialDisposable classes that implement Disposable.\nCompositeDisposable is a container that can hold multiple disposables and dispose them all at once.\nSerialDisposable is a container that is used to replace the current disposable with the new one.\n I hope this post was helpful. If you have questions or something is unclear - please leave a comment!\n","date":"Jun 20, 2021","permalink":"/posts/when_how_use_rxjava_disposable_serialdisposable_compositedisposable/","series":null,"tags":["android","rxJava"],"title":"When and How to Use RxJava Disposable"},{"categories":null,"content":"There are so many different courses, tutorials, and instructions out there for you to learn mobile development. In the sea of options, it‚Äôs important to understand what will help you be ready in the professional workplace and excel in programming.\nWhile there are some teachers that can explain the concept well, you may leave the class asking yourself how can you apply this knowledge. And it‚Äôs because these teachers don‚Äôt have the experience building and shipping professional apps. It‚Äôs like knowing all theory, but not actual practice.\nThere are also some great professionals who share their knowledge and tutorials (mostly on Udemy) that are so advanced, it may leave you wondering whether you‚Äôre capable of learning anything or not. And it‚Äôs not you, it‚Äôs the profesional. Unfortunately, some senior developers forget what it was like to be a beginner. Thus, they create tutorials to solve problems while falsely assuming that their reader knows the underlying framework to their proposed solution\nAnd that‚Äôs why finding a truly great course, that will help you excel at learning and understanding software development is very important. I really like what Udacity has been doing so far. They combine both: teacher and professional perspectives, to help you learn properly.\n In fact, I liked their approach so much that last year I decided to collaborate with them in making an Android Kotlin Developer Nanodegree . The main difference of the nanodegree is at the end of each lesson and chapter there are projects, that have been developed by professionals, like me, based on the previous experience building and releasing apps.\n And to be honest with you, it was not easy to explain things in plain English without any technical jargon. With tremendous help from Udacity, we‚Äôve nailed down the course, so everyone can just take it and start building their own Android apps. Make sure to check out the degree , and if you have any questions about ‚ÄúAdvanced Android Apps with Kotlin, Part 1‚Äù, just ping me, because I worked on it =).\nFor those, who are in the beginning of their journey to become an Android Developer, I\u0026rsquo;d recommend looking at \u0026ldquo;Android Basics\u0026rdquo; . It covers all the basics of Android Framework and it will help you to get comfortable with Android.\nIf you\u0026rsquo;re thinking to swing to the dark side and become an iOS Developer, then definitely check out this nanodegree .\nSoftware development is a continuous education. Don‚Äôt assume after finishing these nanodegrees, you‚Äôll know everything. It is just the beginning. You‚Äôll learn so much as you go, and that‚Äôs the beauty of working as a developer - you get paid to keep learning.\n","date":"Mar 15, 2021","permalink":"/courses/","series":null,"tags":null,"title":"How to Choose Mobile App Development Course Online?"},{"categories":["Tutorials"],"content":"This article is based off my talk at Droidcon SF this year. Kotlin is well-known for null-safety and extension functions features among android developers. Extension functions provide the ability to make new functionality of an extending class without making changes to it. In addition, the new functionality can be declared outside of the extending class. They\u0026rsquo;re also very beneficial when you want to tweak an api that can\u0026rsquo;t be modified.\nWriting a good extension function comes with practice, and there are no universal rules on how or when to make them. Every developer declares the rules for themselves based on the business need of an app. But regardless of what the needs are, there are some rules I\u0026rsquo;ve set for myself. Let\u0026rsquo;s go over some sad examples of making extensions:\nExtending android and java common types to meet business logic This reasoning comes up as a quick solution for many of us. But down the road, it\u0026rsquo;ll get dirty and unmanageable. fun CharSequence.toAnimal(): Animal { return Animal( id = this.toString(), name = this.toString(), logo = \u0026#34;\u0026#34;, isDomestic = false, inRedList = false, description = this.toString() ) }\nInstead I\u0026rsquo;d recommend to separate business and common types. Extension functions are great for mapping business to business logic: fun WildAnimal.toAnimal(): Animal { return Animal( id = id, name = name, logo = logo, isDomestic = false, description = shortDescription, inRedList = inRedList ) }\nor common to common: @kotlin.internal.InlineOnly public inline fun String.toPattern(flags: Int = 0): java.util.regex.Pattern { return java.util.regex.Pattern.compile(this, flags) }\nModifying members of an extending class Extension functions are meant to extend a class with new functionality, not to modify or insert members into it.\nfun MainActivity.showWhiteLoadingIndicator() { mNumActiveLoadingIndicators++ runOnUiThread { . . . } } In the example above, extension function showWhiteLoadingIndicator() is incrementing a member of MainActivity mNumActiveLoadingIndicators.\nclass MainActivity : AppCompatActivity() { var mNumActiveLoadingIndicators: Int = 0 } Although this might work and some developers do practice it, making an extension function out of it seems as an overhead to me. No one cancelled out regular member functions, which can help you achieve the same functionality in the end.\nclass MainActivity : AppCompatActivity() { var mNumActiveLoadingIndicators: Int = 0 fun showWhiteLoadingIndicator() { mNumActiveLoadingIndicators++ runOnUiThread { . . . } } Using the same name as a member function This is not a sad example, more of a caution to developers, who are switching to Kotlin and trying out extension functions. When making an extension function, be careful with naming. If it matches a member function, and is applicable to given arguments, compiler will choose the member function over an extension function.\n@RemotableViewMethod public void setBackgroundColor(@ColorInt int color) { if (mBackground instanceof ColorDrawable) { ((ColorDrawable) mBackground.mutate()).setColor(color); computeOpaqueFlags(); mBackgroundResource = 0; } else { setBackground(new ColorDrawable(color)); } } setBackgroundColor(@ColorInt int color) is a member function of View class in android, and it accepts argument of type int. Now if we look at the below extension function, the name and argument type match the member function.\nfun View.setBackgroundColor(colorResId: Int) { setBackgroundColor( ContextCompat.getColor( context, colorResId ) ) } Instead, the easiest solution will be to rename the extension function:\nfun View.setBackgroundColorResId(colorId: Int) { setBackgroundColor( ContextCompat.getColor( context, colorId ) ) } Extending context on every occasion We have all heard that the best way to start converting your app to kotlin is by converting util or helper methods into extension functions. Most likely, those methods at some point require the context to be passed: public static void showGif(String url, Context context, ImageView imageView) { Glide.with(context).asGif() .listener(new RequestListener\u0026lt;GifDrawable\u0026gt;() { @Override public boolean onLoadFailed(@Nullable GlideException e, Object model, Target\u0026lt;GifDrawable\u0026gt; target, boolean isFirstResource) { return false; } @Override public boolean onResourceReady(GifDrawable resource, Object model, Target\u0026lt;GifDrawable\u0026gt; target, DataSource dataSource, boolean isFirstResource) { return false; } }) .load(url) .into(imageView); }\nAnd naturally, the first thought is to extend the context where the rest of parameters can be passed to it: fun Context.showGif(imageView: ImageView, url: String) { Glide.with(this) .asGif() .listener(object : RequestListener\u0026lt;GifDrawable\u0026gt; { override fun onLoadFailed(e: GlideException?, model: Any?, target: Target\u0026lt;GifDrawable\u0026gt;?,isFirstResource: Boolean ) = false override fun onResourceReady(resource: GifDrawable?, model: Any?, target: Target\u0026lt;GifDrawable\u0026gt;?, dataSource: DataSource?, isFirstResource: Boolean ) = false }) .load(url) .into(imageView) }\nAt first glance, compiler doesn‚Äôt give any errors, the code runs, and the same functionality is preserved. But if we look at the docs, we can see that the ImageView class already has a member function, that returns a type Context. Therefore we can retrieve context directly from it by extending Imageview: fun ImageView.asGif(url: String) { Glide.with(this.context) .asGif() .listener(object : RequestListener\u0026lt;GifDrawable\u0026gt; { override fun onLoadFailed(e: GlideException?, model: Any?, target: Target\u0026lt;GifDrawable\u0026gt;?, isFirstResource: Boolean ) = false override fun onResourceReady(resource: GifDrawable?, model: Any?, target: Target\u0026lt;GifDrawable\u0026gt;?, dataSource: DataSource?, isFirstResource: Boolean ) = false }) .load(url) .into(this) }\nAnother case I commonly see is to extend context to display some other views: fun Context.showDialog(message: String, activity: Activity?) { if (activity != null \u0026amp;\u0026amp; !activity.isFinishing) { MaterialDialog.Builder(this) .content(message) .positiveText(\u0026#34;Ok\u0026#34;) .show() } }\nBe aware, that by extending Context, you\u0026rsquo;re letting every other context subclass that doesn\u0026rsquo;t have access to Window class have the ability to call the extension function. For instance, you can access context inside service, therefore you can call context.showDialog(), but dialog needs to be drawn on window, that needs an access to content which lives on activity, therefore calling showDialog() in service will crash.\nNow about some good practices:\nMaking an extension function out of a nullable receiver public actual fun String?.equals(other: String?, ignoreCase: Boolean = false): Boolean { if (this === null) return other === null return if (!ignoreCase) (this as java.lang.String).equals(other) else (this as java.lang.String).equalsIgnoreCase(other) } Adding iterators via extension functions This is a perfect example of extending a limited api: inline fun Menu.forEach(action: (item: MenuItem) -\u0026gt; Unit) { for (index in 0 until size()) { action(getItem(index)) } }\nConverting from one interface to another public fun \u0026lt;K, V\u0026gt; Map\u0026lt;out K, V\u0026gt;.asSequence(): Sequence\u0026lt;Map.Entry\u0026lt;K, V\u0026gt;\u0026gt; { return entries.asSequence() } It\u0026rsquo;s important to structure extension functions properly. For example, I usually create a file that contains all extension functions of a receiver type. It\u0026rsquo;s easy down the road for new developers in the team to not make duplicated functions, and also easy to copy a file from one project to another üòÑ .\nCode samples can be found here Huge thanks to Eugenio Lopez for being so patient and reviewing the article many times üôè\n","date":"Dec 29, 2020","permalink":"/posts/good-and-sad-extensions/","series":null,"tags":["android","kotlin"],"title":"Good and Sad Examples of Extension Functions"},{"categories":["Tutorials"],"content":"These days, most startup apps heavily rely on third-party libraries to send push notifications to a user, thus causing developers to usually not pay too much attention to Android notification changes.\nFor example, I was working on my side-project which sends a notification once the download is completed (was checking how DownloadManager works).\nBack in 2016, you\u0026rsquo;d need to initialize NotificationManager and pending intent if notification contains custom action:\n1private lateinit var notificationManager: NotificationManager 2private lateinit var pendingIntent: PendingIntent 3 4override fun onCreate(savedInstanceState: Bundle?) { 5 ... 6 notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager 7 8 val intent = Intent(this, DetailActivity::class.java) 9 pendingIntent = 10 PendingIntent.getActivity(this, 1, intent, PendingIntent.FLAG_UPDATE_CURRENT) 11} And then after download is complete, you\u0026rsquo;d need to build the notification, include pendingIntent and send it to notification manager:\n1val builder = NotificationCompat.Builder(context) 2 .setSmallIcon(R.drawable.ic_assistant_black_24dp) 3 .setContentTitle(getString(R.string.notification_title)) 4 .setContentText(getString(R.string.notification_description)) 5 .setPriority(NotificationCompat.PRIORITY_MAX) 6 .addAction(R.drawable.icon, getString(R.string.notification_button), pendingIntent) 7 8notificationManager.notify(1, builder.build()) After writing code and running the app, the notification wasn\u0026rsquo;t getting displayed. I thought maybe I was incorrectly implementing DownloadManager since I had just started playing around with it. So, after some debugging, I saw that the DownloadManager worked flawlessly and notificationBuilder did in-fact get called, but nothing was displayed ü§¶‚Äç. The next obvious step was to google the issue. The first stackOverflow answer mentioned the following change in NotificationManager for Android O and above.\nüí°So for the devices running on Android O and above, it\u0026rsquo;s required to create a channel for different kind of notifications where id, name and importance should be passed in constructor:\noverride fun onCreate(savedInstanceState: Bundle?) { ... notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager if (Build.VERSION.SDK_INT \u0026gt;= Build.VERSION_CODES.O) { val channel = NotificationChannel( CHANNEL_ID, getString(R.string.notification_title), NotificationManager.IMPORTANCE_HIGH ) notificationManager.createNotificationChannel(channel) } } The same channel id should be passed in notificationBuilder\u0026rsquo;s constructor alongside with context: val builder = NotificationCompat.Builder(context, CHANNEL_ID)\nMade the changes, the notification got displayed! But the action button didn\u0026rsquo;t work üòí. After another round of googling, I found out the addAction method in notificationBuilder now requires an Action class, which is basically a wrapper of the arguments addAction method used to accept.\nThe full code of sending and displaying notifications nowadays is below:\nprivate lateinit var notificationManager: NotificationManager private lateinit var action: NotificationCompat.Action override fun onCreate(savedInstanceState: Bundle?) { ... notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager if (Build.VERSION.SDK_INT \u0026gt;= Build.VERSION_CODES.O) { val channel = NotificationChannel( CHANNEL_ID, getString(R.string.notification_title), NotificationManager.IMPORTANCE_HIGH ) notificationManager.createNotificationChannel(channel) } val intent = Intent(this, DetailActivity::class.java) val pendingIntent = PendingIntent.getActivity(this, 1, intent, PendingIntent.FLAG_UPDATE_CURRENT) action = NotificationCompat.Action.Builder( R.drawable.icon, getString(R.string.notification_button), pendingIntent ).build() } ... private fun downloadCompleted() { val builder = NotificationCompat.Builder(context, CHANNEL_ID) .setSmallIcon(R.drawable.ic_assistant_black_24dp) .setContentTitle(getString(R.string.notification_title)) .setContentText(getString(R.string.notification_description)) .setPriority(NotificationCompat.PRIORITY_MAX) .addAction(action) notificationManager.notify(1, builder.build()) } Hopefully, this article was helpful and stay tuned for another then-and-now article!\n","date":"Mar 1, 2020","permalink":"/posts/how-to-display-notification-in-2020/","series":null,"tags":["android"],"title":"How to Display Notifications in 2020"},{"categories":["Articles"],"content":"There is a saying in Russian ‚Äú–∫–∞–∫ –ª–æ–¥–∫—É –Ω–∞–∑–æ–≤–µ—à—å, —Ç–∞–∫ –æ–Ω–∞ –∏ –ø–æ–ø–ª—ã–≤–µ—Ç‚Äù[a boat sails in accordance with its name]. So January 1st I declared the 2019 to be more bold, tenacious and eager. And oh, has it been! 2019 was a roller-coaster of challenges and rewards.\nA few things have shaped this year:\n  Personally, I hardly ever ask people for anything I want or need. But I can definitely ask someone to do a favor to help family, friends, and colleagues. My parents taught me to put your head down, work hard, and you‚Äôll get rewarded. Unfortunately, it‚Äôs not always enough. This year I‚Äôm proud of myself for stepping up and being vocal about my needs and intentions. A perfect example was asking for my promotion.\n  Another act of courage I made was when I submitted my first abstract for #AndroidSummit conference this year with what I thought was a zero chance of it being selected. But to my surprise, it was. This is a big one[‚ùó]. I haven‚Äôt done public speaking in 8 years. And haven‚Äôt done it in english for‚Ä¶ about my entire life. Thus me being a perfectionist, I made sure not to rest a day to kick it in overdrive every day for a month and a half until I wrapped up all my research into a structured paper and began religiously rehearsing the talk over and over. Then, on the day of the talk, anxiety and nervousness kicked in full speed, but somehow I managed to pull through. Two months later, I got an email my talk was selected for GDG #DevFest in Sydney, Australia. I was crazy excited. This was my first international and remote talk. But thankfully, it went through very smoothly. A week later, two of my talks were selected for #DroidconSF . I‚Äôve watched many videos about tech talks and decided to follow the tips from them. A lesson learned: do not watch any videos like these before your actual talk, it‚Äôll mess your head up.\n  My talk at #DroidconSF, which I had already given twice in the past, went terribly. I‚Äôm talking stuttering, rough transitions between my Keynote slides, and the whole first verse from Eminem‚Äôs Lose Yourself. This was my third time giving the talk, yet for some reason, it went down-hill compared to my first time. That should had not been the case. So I apologized in the middle of the talk ü§¶. Yes, it did fit a stereotype about females always saying sorry. Yes, in a professional world, you keep going as it was planned. Since then, I‚Äôve gotten many feedback that I shouldn\u0026rsquo;t apologized, but it happened. However more importantly, I‚Äôve apologized to myself, because it didn‚Äôt meet my expectations. Was it right doing so, or wrong - I still don‚Äôt know.\n  My most important part of speaking this year was to recruit females in STEM. Yes, you might think what a big deal, everybody is hiring females nowadays to even the gender disbalance. But being honest and straightforward with a candidate, while still convincing them to join a company takes a lot of work. From the bright minds of the Grace Hopper program, to the interns at America\u0026rsquo;s the top universities, I‚Äôm so glad to meet each of you, and hope to see you in my team next year.\n  There is a special feeling I get every time when a female developer comes up and gives me feedback and support. I don‚Äôt know how to explain it, but it calms me down a lot. It is unique üíö. Hope to give and receive many more of it next year. P.S. Please remember, regardless of the gender I will always appreciate any feedback.\n  For this year I had only two goals: to speak at one conference and to write one article. I‚Äôm happy to achieve both. Years of trials and fails at new year resolutions taught me a great lesson: choosing only one goal is small. You‚Äôll just keep pushing it off to the side since you have twelve months to complete it until there aren\u0026rsquo;t any months lefts. Choosing more than two goals makes you anxious, which doesn‚Äôt help to achieve even one of them. Two is perfect - it gives just enough time to procrastinate. Yet, gives just the right amount of urgency to get yourself to reach both goals!\nAs the year [and decade] comes to an end, I‚Äôd like to thank #androidCommunity for the welcoming and continuous support, and I‚Äôm immensely grateful to be part of this amazing community! Let‚Äôs keep this up, 2020 üí™ !\n","date":"Dec 31, 2019","permalink":"/posts/recap-of-2019/","series":null,"tags":null,"title":"Recap of 2019: The Art of Speaking"},{"categories":null,"content":"The list of the talks I\u0026rsquo;ve given in the past. They\u0026rsquo;re primarily focused on Android Development and Kotlin language. If you would like me to speak at your event, please fill out this form .\n2021:    Name Conference/Meetup Location Date Video¬† Slides     Employment and Employability Trends Asia Pacific University Of Technology and Innovation Kuala-Lumpur, Malaysia March 2021 \u0026mdash; \u0026mdash;   MVI in a nutshell Women Developer Academy  USA, North America May 2021 \u0026mdash; Slides    Why would teachers want to know about coding Android Apps? Coding Android Apps in Kotlin  USA, North America June 2021   Slides    The MOST BASIC Function Coding Android Apps in Kotlin  USA, North America June 2021   Slides    What is Android Studio Coding Android Apps in Kotlin  USA, North America June 2021   Slides    What is GIT version control system Coding Android Apps in Kotlin  USA, North America July 2021   Slides    Kotlin and Github. Simple Project Coding Android Apps in Kotlin  USA, North America July 2021   Slides     2020: How it started: üö•üö•üö•üö•üö•üö•üö•üö•üö•üö•üö•üö•üö•\nWhat #AndroidDev conferences are open for remote talks this yearü§î? üö•üö•üö•üö•üö•üö•üö•üö•üö•üö•üö•üö•üö•\n\u0026mdash; Aida (@Aida_Isay) January 14, 2020  How it ended: An update on KotlinConf - Last year we made the decision to cancel KotlinConf 2020 early on, and postpone the event to 2021. Unfortunately it does not look like it will be possible to hold the event the way we\u0026#39;d like to in 2021 either. (1/4)\n\u0026mdash; KotlinConf (@kotlinconf) January 27, 2021  2019:    Name Conference/Meetup Location Date Video¬† Slides     Reactive approach to delegation in Kotlin Android Summit  McLean, VA, USA August 2019    Slides    Reactive approach to delegation in Kotlin GDG DevFest  Sydney, Australia November 2019 \u0026mdash; Slides    Reactive approach to delegation in Kotlin Droidcon SF  San Francisco, CA, USA November 2019    Slides    Level up your extension game Droidcon SF  San Francisco, CA, USA November 2019    Slides     ","date":"Dec 23, 2019","permalink":"/talks/","series":null,"tags":null,"title":"Talks"},{"categories":["Tutorials"],"content":"Kotlin extensions are very practical. They help to reduce the boilerplate of the code.\nCode highlight example: fun \u0026lt;T\u0026gt; Context.getComponent(clazz: Class\u0026lt;T\u0026gt;): T { return this.applicationContext.getSystemService(clazz.name) as T }\nGist:\n Tweet: I\u0026#39;m in love with `SpannableStringBuilder` extensions. Did not know it\u0026#39;s been out since 2017! #android #androidDev pic.twitter.com/sgGskizj4j\n\u0026mdash; Aida (@Aida_Isay) September 14, 2019  Practice, practice, practice\nThe End!\n","date":"Dec 20, 2019","permalink":"/posts/how_not_to_abuse_extensions_in_kotlin/","series":null,"tags":["android"],"title":"How Not to Abuse Extensions in Kotlin"},{"categories":null,"content":"Hi there üëã ! My name is Aida Issayeva. I\u0026rsquo;m a Sr.Android Engineer with over 6 years of experience (as of March 2021) building and scaling Android Apps from the ground up.\n Interested in working with me? Fill out this form and I\u0026rsquo;ll get back to you within 2-3 days.\n I like to share tidbits of knowledge I\u0026rsquo;ve gathered throughout the years. Some of them may be very specific to Android development, some of them are about general software development, and some are about soft skills that are helpful in a career.\nAs you guessed most of my articles are published on this blog. Sometimes when I feel courageous enough, I give talks . And sometimes when I need to vent out, I post witty and sarcastic short videos about tech life on Tiktok .\nI\u0026rsquo;ve also collaborated with Udacity and curated Advanced Android Apps with Kotlin, Part 1 of Android Kotlin Developer Nanodegree . More in details here .\nHere is the list of apps I built, worked and released:\n1. Marcus, 2019 - 2021\nMobile banking app for Goldman Sachs Bank.  2. Clarity Money, 2017 - 2021\nPersonal finance management app. The app sunsetted on March 5th, 2021 and got transitioned into Marcus app.  3. LiquidSky, 2017\nMobile app to connect to any PC game in the cloud.  4. Thorium, 2016\nMobile app for Vessel Monitoring System, that gets connected via Iridium global satellite network.\n They range from satellite communication to finTech to cloud gaming service industries.\nIf you\u0026rsquo;d like to work with me, please fill out this form and I\u0026rsquo;ll get back to you within 2-3 days.\n ","date":"Dec 15, 2019","permalink":"/about/","series":null,"tags":null,"title":"About Me"},{"categories":null,"content":"‚ú® Latest Blog Post ‚ú® üíØ Work with me üíØ üéâ Android Kotlin Nanodegree üéâ üìπ Tiktok üìπ üì∏ Insta üì∏    ","date":"Oct 24, 2019","permalink":"/social/","series":null,"tags":null,"title":""}]