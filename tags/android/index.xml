<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>android on Cups of Code</title><link>https://cupsofcode.com/tags/android/</link><description>Recent content in android on Cups of Code</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2021, Cups of Code</copyright><lastBuildDate>Mon, 31 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://cupsofcode.com/tags/android/index.xml" rel="self" type="application/rss+xml"/><item><title>Jetpack Compose in many shapes and forms</title><link>https://cupsofcode.com/post/jetpack_compose_comes_in_many_shapes_path_forms/</link><pubDate>Mon, 31 Jan 2022 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/jetpack_compose_comes_in_many_shapes_path_forms/</guid><description>Table Of Contents: What is Shape? How to apply Shape? Create a custom shape Final Thoughts Featured in Android Weekly Issue #504. Featured in Jetpack Compose Resources Issue #103. Oftentimes, we get asked to create different custom views and shapes in Android Development. In the old view-based system, we heavily relied on Canvas to create a shape. Luckily, Jetpack Compose introduces new out-of-the-box ways to easily create and modify shapes on the fly.</description></item><item><title>Integrating a seamless in-app review rating experience in MVI</title><link>https://cupsofcode.com/post/google_play_in-app_review_api_integration_mvi/</link><pubDate>Sat, 30 Oct 2021 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/google_play_in-app_review_api_integration_mvi/</guid><description>Table Of Contents: Implementation Testing Manual Testing Unit Testing Last year, Android introduced a new in-app review API that would allow users to review and rate an app within the app itself. Meaning, developers no longer have to worry about keeping track of how many times the “Rate Us” dialog has been displayed to users and whether the users clicked to go Play Store App.</description></item><item><title>When and how to use RxJava Disposable</title><link>https://cupsofcode.com/post/when_how_use_rxjava_disposable_serialdisposable_compositedisposable/</link><pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/when_how_use_rxjava_disposable_serialdisposable_compositedisposable/</guid><description>Featured in Android Weekly Issue #472. Table Of Contents: Disposable CompositeDisposable SerialDisposable Conclusion Disposable RxJava 2 introduced the concept of Disposables .
Disposables are streams/links/connections between Observer and Observable. They&amp;rsquo;re meant to give power to the Observers to control Observables. In most cases, the Observer is a UI element, ie; Fragment, Activity, or a corresponding viewmodel of those elements. While Observable represents a data flow where data can be passed from one source to another and get modified along the way if needed.</description></item><item><title>How to display notifications in 2020</title><link>https://cupsofcode.com/post/how-to-display-notification-in-2020/</link><pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/how-to-display-notification-in-2020/</guid><description>These days, most startup apps heavily rely on third-party libraries to send push notifications to a user, thus causing developers to usually not pay too much attention to Android notification changes.
For example, I was working on my side-project which sends a notification once the download is completed (was checking how DownloadManager works).
Back in 2016, you&amp;rsquo;d need to initialize NotificationManager and pending intent if notification contains custom action:
1private lateinit var notificationManager: NotificationManager 2private lateinit var pendingIntent: PendingIntent 3 4override fun onCreate(savedInstanceState: Bundle?</description></item><item><title>Good and sad examples of extension functions</title><link>https://cupsofcode.com/post/good-and-sad-extensions/</link><pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/good-and-sad-extensions/</guid><description>This article is based off my talk at Droidcon SF this year. Kotlin is well-known for null-safety and extension functions features among android developers. Extension functions provide the ability to make new functionality of an extending class without making changes to it. In addition, the new functionality can be declared outside of the extending class. They&amp;rsquo;re also very beneficial when you want to tweak an api that can&amp;rsquo;t be modified.</description></item></channel></rss>