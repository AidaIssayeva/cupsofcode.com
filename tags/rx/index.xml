<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rx on Cups of Code</title><link>https://cupsofcode.com/tags/rx/</link><description>Recent content in rx on Cups of Code</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright Â© 2024, Cups of Code</copyright><lastBuildDate>Sun, 20 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://cupsofcode.com/tags/rx/index.xml" rel="self" type="application/rss+xml"/><item><title>When and how to use RxJava Disposable</title><link>https://cupsofcode.com/post/when_how_use_rxjava_disposable_serialdisposable_compositedisposable/</link><pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/when_how_use_rxjava_disposable_serialdisposable_compositedisposable/</guid><description>Featured in Android Weekly Issue #472. Table Of Contents: Disposable CompositeDisposable SerialDisposable Conclusion Disposable RxJava 2 introduced the concept of Disposables .
Disposables are streams/links/connections between Observer and Observable. They&amp;rsquo;re meant to give power to the Observers to control Observables. In most cases, the Observer is a UI element, ie; Fragment, Activity, or a corresponding viewmodel of those elements. While Observable represents a data flow where data can be passed from one source to another and get modified along the way if needed.</description></item></channel></rss>