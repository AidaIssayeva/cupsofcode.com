<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorials on Cups of Code</title><link>https://cupsofcode.com/categories/tutorials/</link><description>Recent content in Tutorials on Cups of Code</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright Â© 2021, Cups of Code</copyright><lastBuildDate>Sun, 20 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://cupsofcode.com/categories/tutorials/index.xml" rel="self" type="application/rss+xml"/><item><title>When and how to use RxJava Disposable</title><link>https://cupsofcode.com/post/when_how_use_rxjava_disposable_serialdisposable_compositedisposable/</link><pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/when_how_use_rxjava_disposable_serialdisposable_compositedisposable/</guid><description>Disposable RxJava 2 introduced the concept of Disposables.
Disposables are streams/links/connections between Observer and Observable. They&amp;rsquo;re meant to give power to the Observers to control Observables. In most cases, the Observer is a UI element, ie; Fragment, Activity, or a corresponding viewmodel of those elements. While Observable represents a data flow where data can be passed from one source to another and get modified along the way if needed.</description></item><item><title>How to display notifications in 2020</title><link>https://cupsofcode.com/post/how-to-display-notification-in-2020/</link><pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/how-to-display-notification-in-2020/</guid><description>These days, most startup apps heavily rely on third-party libraries to send push notifications to a user, thus causing developers to usually not pay too much attention to Android notification changes.
For example, I was working on my side-project which sends a notification once the download is completed (was checking how DownloadManager works).
Back in 2016, you&amp;rsquo;d need to initialize NotificationManager and pending intent if notification contains custom action:
1 2 3 4 5 6 7 8 9 10 11 private lateinit var notificationManager: NotificationManager private lateinit var pendingIntent: PendingIntent override fun onCreate(savedInstanceState: Bundle?</description></item><item><title>Good and sad examples of extension functions</title><link>https://cupsofcode.com/post/good-and-sad-extensions/</link><pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/good-and-sad-extensions/</guid><description>This article is based off my talk at Droidcon SF this year.
Kotlin is well-known for null-safety and extension functions features among android developers. Extension functions provide the ability to make new functionality of an extending class without making changes to it. In addition, the new functionality can be declared outside of the extending class. They&amp;rsquo;re also very beneficial when you want to tweak an api that can&amp;rsquo;t be modified.</description></item><item><title>How not to abuse extensions in Kotlin</title><link>https://cupsofcode.com/post/how_not_to_abuse_extensions_in_kotlin/</link><pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/how_not_to_abuse_extensions_in_kotlin/</guid><description>Kotlin extensions are very practical. They help to reduce the boilerplate of the code.
Code highlight example: 1 2 3 fun &amp;lt;T&amp;gt; Context.getComponent(clazz: Class&amp;lt;T&amp;gt;): T { return this.applicationContext.getSystemService(clazz.name) as T }
Gist:
Tweet: I&amp;#39;m in love with `SpannableStringBuilder` extensions. Did not know it&amp;#39;s been out since 2017! #android #androidDev pic.twitter.com/sgGskizj4j
&amp;mdash; Aida (@Aida_Isay) September 14, 2019 Practice, practice, practice
The End!</description></item></channel></rss>