<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ship 30 for 30 on Cups of Code</title><link>https://cupsofcode.com/categories/ship-30-for-30/</link><description>Recent content in Ship 30 for 30 on Cups of Code</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2024, Cups of Code</copyright><lastBuildDate>Tue, 15 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://cupsofcode.com/categories/ship-30-for-30/index.xml" rel="self" type="application/rss+xml"/><item><title>5 Small (But Easily Fixable) Mistakes Most Software Engineers Do When Trying to get Promoted - Part 2</title><link>https://cupsofcode.com/post/day_22_5_small_but_easily_fixable_mistakes_most_software_engineers_do_when_trying_to_get_promoted_part_2/</link><pubDate>Tue, 15 Oct 2024 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/day_22_5_small_but_easily_fixable_mistakes_most_software_engineers_do_when_trying_to_get_promoted_part_2/</guid><description>Getting promoted oftentimes isn&amp;rsquo;t about being &amp;ldquo;the best.&amp;rdquo;
It&amp;rsquo;s actually far more about being reliable—and people being able to trust that you won&amp;rsquo;t make little mistakes.
For software engineers seeking promotion, these are the 5 small (but easily fixable) mistakes most people make—and why, if you can avoid these, your career is going to accelerate exponentially.
Part 1 is here .
Part 2:
Mistake #4: Not Asking for Promotion Many software engineers believe that hard work alone will lead to a promotion, but this is often not enough.</description></item><item><title>5 Small (But Easily Fixable) Mistakes Most Software Engineers Do When Trying to get Promoted - Part 1</title><link>https://cupsofcode.com/post/day_21_5_small_but_easily_fixable_mistakes_most_software_engineers_do_when_trying_to_get_promoted_part_1/</link><pubDate>Sun, 13 Oct 2024 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/day_21_5_small_but_easily_fixable_mistakes_most_software_engineers_do_when_trying_to_get_promoted_part_1/</guid><description>Getting promoted oftentimes isn&amp;rsquo;t about being &amp;ldquo;the best.&amp;rdquo;
It&amp;rsquo;s actually far more about being reliable—and people being able to trust that you won&amp;rsquo;t make little mistakes.
For software engineers seeking promotion, these are the 5 small (but easily fixable) mistakes most people make—and why, if you can avoid these, your career is going to accelerate exponentially.
Mistake #1: Not Choosing Impactful Projects Selecting the right projects to work on is crucial for standing out and advancing in your career.</description></item><item><title>4 Reasons Why I Think Everyone Should Read Staff Engineer: Leadership beyond management track</title><link>https://cupsofcode.com/post/day_20_4_reasons_why_i_think_everyone_should_read_staff_engineer_leadership_beyond_management_track/</link><pubDate>Fri, 13 Sep 2024 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/day_20_4_reasons_why_i_think_everyone_should_read_staff_engineer_leadership_beyond_management_track/</guid><description>&amp;ldquo;Staff Engineer: Leadership beyond management track&amp;rdquo; by Will Larson is the best book ever written on technical leadership in software engineering.
If you&amp;rsquo;ve read it, then you know exactly what I&amp;rsquo;m talking about.
But if you haven&amp;rsquo;t, here&amp;rsquo;s why:
Reason #1: It gives practical advice for engineers who want to become technical leaders. This book is like a guide for engineers aiming for leadership roles.
It offers clear steps that go beyond basic tips, focusing on challenges unique to technical leaders.</description></item><item><title>3 Simple (But Effective) Pieces Of Advice I’d Give Anyone Starting In Software Development</title><link>https://cupsofcode.com/post/day_19_3_simple_but-effective_pieces_of_advice_id_give_anyone_starting_in_software_development/</link><pubDate>Mon, 26 Aug 2024 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/day_19_3_simple_but-effective_pieces_of_advice_id_give_anyone_starting_in_software_development/</guid><description>I have been working in software development for 10 years.
These are the 3 simple (but effective) pieces of advice I&amp;rsquo;d give anyone starting out (or who wants to get started):
Advice #1: Focus on Fundamentals Before diving into the latest frameworks and tools, ensure you have a strong grasp of the fundamental concepts of programming.
Understanding basic principles such as data structures, algorithms, and object-oriented programming will provide a solid foundation and make learning new technologies much easier.</description></item><item><title>If You’re Interested In Learning Android Development, Subscribe To This YouTube Channel</title><link>https://cupsofcode.com/post/day_18_if_you_re_interested_in_learning_android_development_subscribe_to_this_youtube_channel/</link><pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/day_18_if_you_re_interested_in_learning_android_development_subscribe_to_this_youtube_channel/</guid><description>Learning Android Development is hard.
Luckily, everything you need to know to get started, become proficient, and even get hired as an android developer, you have access to online—for free.
Just subscribe to these YouTube channel:
Android Developers Youtube Channel The Android Developers YouTube Channel is the official platform for anyone interested in learning about Android development.
This channel provides the latest Android news, keeping developers informed about new features and updates in the ecosystem.</description></item><item><title>Something Weird Most People Don’t Know About Software Engineers</title><link>https://cupsofcode.com/post/day_17_something_weird_most_people_dont_know_about_software_engineers/</link><pubDate>Thu, 08 Aug 2024 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/day_17_something_weird_most_people_dont_know_about_software_engineers/</guid><description>There are a lot of things most people don&amp;rsquo;t know about working as a software engineer.
For example, did you know&amp;hellip;
Many software engineers have little to no formal background in computer science.
Software engineers spend more time reading code than writing it.
With the remaining writing time, they mostly write documentation, not code.
For anyone in the industry, this stuff is common knowledge.</description></item><item><title>Why Shouldn't Mobile Platform Teams Handle Random Tasks? Here’s What Successful Leaders Do Differently</title><link>https://cupsofcode.com/post/day_16_why_shouldnt_mobile_platform_teams_handle_random_tasks_heres_what_successful_leaders_do_differently/</link><pubDate>Wed, 07 Aug 2024 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/day_16_why_shouldnt_mobile_platform_teams_handle_random_tasks_heres_what_successful_leaders_do_differently/</guid><description>Habit 1: Prioritize Strategic Projects Over Random Tasks Successful leaders focus on prioritizing strategic projects to maximize the productivity of mobile platform teams.
By directing resources towards initiatives that align with long-term business goals, these leaders enhance the team’s impact and efficiency.
Examples of strategic projects might include developing support for local AI-model on devices to personalize user experiences, or overhauling the app’s architecture to improve scalability and performance.
Such focused efforts allow the platform team to act as a true force multiplier for all product teams, amplifying the overall capabilities and competitive edge of the company.</description></item><item><title>Anyone Interested In Making Organizational Changes Should Read This Book</title><link>https://cupsofcode.com/post/day_15_anyone_interested_in_making_organizational_changes_should_read_this_book/</link><pubDate>Tue, 06 Aug 2024 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/day_15_anyone_interested_in_making_organizational_changes_should_read_this_book/</guid><description>If you are at all interested in making organizational changes, then you need to clear your calendar and read:
&amp;ldquo;Switch: How to Change Things When Change Is Hard&amp;rdquo; by Dan Heath and Chip Heath.
And here&amp;rsquo;s why:
Reason #1: True operational excellence is within the reach of anyone willing to address real issues. You don&amp;rsquo;t have to be in &amp;ldquo;top management&amp;rdquo; to make changes, but you do need to work harder and more explicitly.</description></item><item><title>6 Rules Every Platform Engineer Should Know for Crafting Clear Technical Announcements - Part III</title><link>https://cupsofcode.com/post/day_14_6_rules_every_platform_engineer_should_know_for_crafting_clear_technical_announcements_part_3/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/day_14_6_rules_every_platform_engineer_should_know_for_crafting_clear_technical_announcements_part_3/</guid><description>This article is a Part III of my series on crafting clear technical announcements.
Part I is available here .
Part II is here .
Rule 5: Write Short Sentences Writing short sentences is a powerful technique for enhancing clarity and engagement in technical communications.
Each sentence should adhere to the principle of &amp;ldquo;One Sentence == One Idea&amp;rdquo;, where sentence conveys a single, clear thought without overloading the reader. Reducing the use of subordinate clauses, such as:</description></item><item><title>6 Rules Every Platform Engineer Should Know for Crafting Clear Technical Announcements - Part II</title><link>https://cupsofcode.com/post/day_13_6_rules_every_platform_engineer_should_know_for_crafting_clear_technical_announcements_part_2/</link><pubDate>Wed, 31 Jul 2024 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/day_13_6_rules_every_platform_engineer_should_know_for_crafting_clear_technical_announcements_part_2/</guid><description>This article is a continuation of my series on crafting clear technical announcements.
If you missed Part I, you can catch up here .
Part III is available via this link .
In this installment, we will dive deeper into another 2 essential rules that help platform engineers communicate more effectively with their teams and stakeholders.
Rule 3: Reduce &amp;ldquo;There Is/There Are&amp;rdquo; Usage Developers love using &amp;lsquo;There is/There are&amp;rsquo; in their sentences when referring to issues, learnings, or just about everything.</description></item><item><title>6 Rules Every Platform Engineer Should Know for Crafting Clear Technical Announcements - Part I</title><link>https://cupsofcode.com/post/day_12_6_rules_every_platform_engineer_should_know_for_crafting_clear_technical_announcements_part_1/</link><pubDate>Tue, 30 Jul 2024 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/day_12_6_rules_every_platform_engineer_should_know_for_crafting_clear_technical_announcements_part_1/</guid><description>The way you craft and structure technical announcements is key to capturing and retaining the attention of developers.
Developers are:
natural problem-solvers with a keen ability to see through unclear (aka, BS) information many are non-native English speakers, which makes clear and structured communication even more critical. In these series, you&amp;rsquo;ll learn 6 essential rules to help you craft clear technical announcements. This article is Part I. Part II is available here .</description></item><item><title>One Underrated Tool Tip to Help New Hires Onboard, Ramp up, and Start Excelling Faster in Their New Company</title><link>https://cupsofcode.com/post/day_11_one_underrated_tool_tip_to_help_new_hires_onboard_ramp_up_and_start_exceling_faster_in_their_new_company/</link><pubDate>Mon, 29 Jul 2024 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/day_11_one_underrated_tool_tip_to_help_new_hires_onboard_ramp_up_and_start_exceling_faster_in_their_new_company/</guid><description>Joining a new company is always stressful.
You&amp;rsquo;re faced with the task of learning:
new tools, a new codebase, a new testing infrastructure, new errors, all of which are specific to this company. While onboarding videos and assignments provide a structured introduction, the real process of acclimating to a new environment often extends beyond the official onboarding period. For some, it might even take more than 6 months to feel fully integrated.</description></item><item><title>One Big Mistake I Made When I Was First Getting Started As a Software Engineer</title><link>https://cupsofcode.com/post/day_10_one_big_mistake_i_made_when_i_was_first_getting_started_as_a_software_engineer/</link><pubDate>Fri, 26 Jul 2024 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/day_10_one_big_mistake_i_made_when_i_was_first_getting_started_as_a_software_engineer/</guid><description>Like most beginners, I made a lot of mistakes when I first started working as a software engineer.
But this was the biggest one, by far:
Frequently downplaying my individual contributions Here&amp;rsquo;s what happened:
Whenever colleagues praised my work, my natural response was to shy away from the compliments and attribute the success to the team&amp;rsquo;s collective effort, even though I was the primary driver and deliverer of those projects. This modesty, while fostering a supportive team environment, inadvertently masked my specific contributions from the wider organization.</description></item><item><title>One Effective Strategy for Platform Engineers to Showcase Impact in Promotion Packets</title><link>https://cupsofcode.com/post/day_9_one_effective_strategy_for-platform_engineers_to_showcase_impact_in_promotion_packets/</link><pubDate>Thu, 25 Jul 2024 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/day_9_one_effective_strategy_for-platform_engineers_to_showcase_impact_in_promotion_packets/</guid><description>Promotion reviewers often have limited time to dive deeply into each project in a promotion packet, making it crucial to present information that quickly captures their attention.
The best way to capture their attention is by showing the impact of your work in business terms. This approach involves translating technical achievements into quantifiable business outcomes, such as:
increased revenue, cost savings, improved customer satisfaction. For instance, if a project focused on optimizing and speeding up CI build time, you might calculate the cost savings from the developer hours saved due to the optimization.</description></item><item><title>The One Software App I Can’t Live Without For Handling My Life</title><link>https://cupsofcode.com/post/day_8_the_one_software_app_i_cant_live_without_for_handling_my_life/</link><pubDate>Wed, 24 Jul 2024 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/day_8_the_one_software_app_i_cant_live_without_for_handling_my_life/</guid><description>Today, there is an app, website, or software platform for just about anything (including finding someone to walk your dog).
But when it comes to managing my life, there is one app I can&amp;rsquo;t live without:
Notion And here&amp;rsquo;s why: Reason #1: It has seamless integration with many tools, making it a single source of truth for all action items across different tools such as emails, calendars, documents, and other project tracking apps.</description></item><item><title>One Tip Every Junior Software Engineer Needs to Hear to Succeed</title><link>https://cupsofcode.com/post/day_7_1_tip_i_would_give_someone_who_wants_to_become_a_software_engineer/</link><pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/day_7_1_tip_i_would_give_someone_who_wants_to_become_a_software_engineer/</guid><description>Are you a junior software engineer eager to make your mark?
I have been working as a software engineer for 9 years now. And what I can tell you (from experience) is that in order to succeed in this industry you need not only to write code, cover unhappy paths and edge cases, and decide on trade-offs, and other things.
So, here’s the one crucial tip every junior software engineer needs to hear as you advance in your career:</description></item><item><title>2 Steps For Android Developers To Integrate Dependabot Under 10 Minutes And Automate Dependency Updates</title><link>https://cupsofcode.com/post/day_6_2_steps_for_android_developers_to_integrate_dependabot_under_10_minutes_and_automate_dependency_updates-copy/</link><pubDate>Sun, 21 Jul 2024 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/day_6_2_steps_for_android_developers_to_integrate_dependabot_under_10_minutes_and_automate_dependency_updates-copy/</guid><description>Step 1: Enable Dependabot Security Updates Enabling Dependabot security updates in GitHub allows you to automatically receive patches for vulnerabilities in your project&amp;rsquo;s dependencies.
This feature scans your project repositories for dependencies and checks them against a database of known security vulnerabilities. By doing so, it helps ensure that your codebase remains secure from exploits found in outdated or compromised libraries. The updates are proposed as pull requests, making it easy to review and merge the necessary changes into your main branch.</description></item><item><title>3 Realizations About Task Management To Finish Your To-Do List By The End Of Each Day</title><link>https://cupsofcode.com/post/day_5_3_realizations_about_task_management_to_finish_your_to-do_list_by_the_end_of_each_day/</link><pubDate>Thu, 18 Jul 2024 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/day_5_3_realizations_about_task_management_to_finish_your_to-do_list_by_the_end_of_each_day/</guid><description>Realization 1: Prioritize Tasks Effectively As an adult, the list of things to do never ends.
Something always pops up, needs your urgent attention, or is waiting to be scheduled. To manage these tasks effectively, you need to prioritize them. Often, prioritization is based on importance, urgency (deadlines), or a combination of both.
By prioritizing tasks based on importance and urgency, you can manage your responsibilities better.
Realization 2: Use A Single Tracking System As an adult, you receive action items from various sources—emails, calendars, Jira, documents, spreadsheets, phone calls, and more.</description></item><item><title>How I Got Interested in Building Scalable Systems for my life</title><link>https://cupsofcode.com/post/day_4_how_i_got_interested_in_building_scalable_systems_for_my_life/</link><pubDate>Tue, 16 Jul 2024 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/day_4_how_i_got_interested_in_building_scalable_systems_for_my_life/</guid><description>I wouldn&amp;rsquo;t call myself an expert in productivity or system design.
However, I have spent 5,000 hours reading and learning about productivity and system design. And I have probably spent 3,000 hours practicing and integrating these concepts into my own life.
Here&amp;rsquo;s how I first became interested in building a scalable system for my own life: It was the summer of 2021. I was falling behind on work, duties related to a rental property, personal projects, and meeting with friends and family.</description></item><item><title>The Best Way To Get Started Learning About Android Development</title><link>https://cupsofcode.com/post/day_3_the_best_way_to_get_started_learning_about_android_development/</link><pubDate>Mon, 15 Jul 2024 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/day_3_the_best_way_to_get_started_learning_about_android_development/</guid><description>I love learning about Android Development.
Unfortunately, when I first got interested in Android Development, I had a hard time figuring out where to start.
So, if you are trying to learn more about Android Development, here&amp;rsquo;s the best way to get started: Read This Blog: Developer Guides by Google will give you a lay of the land, and is a helpful way to get your bearings.
Take This Course: Android Kotlin Developer Nanodegree by Udacity is a must-read beginner resource for anyone interested in Android Development.</description></item><item><title>3 Essential skills that define a software engineer</title><link>https://cupsofcode.com/post/day_2_3_essential_skills_that_define_a_software_engineer/</link><pubDate>Sun, 14 Jul 2024 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/day_2_3_essential_skills_that_define_a_software_engineer/</guid><description>Being able to code doesn&amp;rsquo;t make you a software engineer, although coding is a fundamental skill and a prerequisite for becoming one.
Anyone can write code that compiles and runs thanks to a wide range of IDEs (integrated development environments). Here are three important skills that transform you into a software engineer:
Skill #1: Robustness Writing code that works in ideal conditions is one thing, but ensuring that it operates under various edge cases, unexpected inputs, and adverse conditions is another.</description></item><item><title>Day 1: Why I'm Starting To Write Online</title><link>https://cupsofcode.com/post/day_1_why_i_m_starting_to_write_online_ship30for30/</link><pubDate>Tue, 25 Jun 2024 00:00:00 +0000</pubDate><guid>https://cupsofcode.com/post/day_1_why_i_m_starting_to_write_online_ship30for30/</guid><description>I recently signed up for Dickie Bush &amp;amp; Nicolas Cole&amp;rsquo;s cohort-based course, Ship 30 for 30.
Here are a few reasons why: To unclutter and consolidate my thoughts into cohesive, digestible material. To build a consistent habit of daily writing. To embrace the mindset of publishing something rather than pursuing perfection. Over the next 30 days, I plan on writing about Android Development, Developer Experience, and Productivity.
Join me on this adventure—and let me know if you have any questions along the way!</description></item></channel></rss>